<?php

/**
 *  This module will handle automatic node creation from a notice node, triggering
 *  subscriptions additions when certain user actions are taken, control the order
 *  in which certain sub routines happen and various other functions/processes not
 *  handled by Subscriptions, Rules or Feeds.
 */

// Include Composer autoloader if not already done.
include 'sites/all/libraries/composer/vendor/autoload.php';

	/*
	 * Changes "save" to "send" on notice creation
	 */
	function galobby_watch_form_alter(&$form, &$form_state, $form_id) {
		 if($form_id == 'notice_node_form' || $form_id == 'government_watch_notice_node_form' || $form_id == 'old_notice_node_form') {
			//dpm($form);
			$form['actions']['submit'] = array('#type' => 'submit', '#value' => t('Send'), '#submit' => array('node_form_submit'));
			unset($form['actions']['preview']);
			if($form_id == 'old_notice_node_form') {
				$form['actions']['submit']['#submit'][] = 'galobby_watch_redirectpamela_submit';
				$form['field_dateendtext']['und']['0']['value']['#default_value'] = 'or TBD'; 
				unset($form['field_starts']['und']['0']['#default_value']['value2']);
				unset($form['field_ends']['und']['0']['#default_value']['value2']);
				unset($form['field_starts_time']['und']['0']['#default_value']['value2']);
				unset($form['field_ends_time']['und']['0']['#default_value']['value2']);
				$form['#validate'][] = 'galobby_watch_custom_notice_validate';
			}
			else {
				$form['#validate'][] = 'galobby_watch_custom_bwgw_notice_validate';
				
			}
		}
		if($form_id == 'taxonomy_form_term')  {
			$form['actions']['submit']['#submit'][] = 'galobby_watch_custom_taxa_submit';
		}
		if($form_id == 'client_watch_node_form') {
			$form['title']['#required'] = FALSE;
			$form['actions']['submit']['#submit'][] = 'galobby_watch_custom_cw_submit';
		}
		if($form_id == 'contracts_node_form') {
			$form['#validate'][] = 'galobby_watch_custom_contract_validate';
		}
		if($form_id == 'subscriptions_page_form') {

			$currentUid = $form['uid']['#value'];
			$currentUser = user_load($currentUid);
			if (in_array('Bundled Subscription User', array_values($currentUser->roles)) || in_array('administrator', array_values($currentUser->roles)) || in_array('Pamela', array_values($currentUser->roles))) {
				$form['8'][2] = array(
					'#type' => 'textfield',
					'#size' => 25,
					'#title' => 'Code Watch keyword entry',
				);
			}
			
			if (in_array('Bundled Subscription User', array_values($currentUser->roles)) || in_array('Bill Watch User', array_values($currentUser->roles)) || in_array('administrator', array_values($currentUser->roles)) || in_array('Pamela', array_values($currentUser->roles))) {
				$form['7'][2] = array(
					'#type' => 'textfield',
					'#size' => 10,
					'#title' => 'Bill Watch bill entry',
				);
			}
			
			if (!in_array('Bill Watch User', array_values($currentUser->roles)) && !in_array('Bundled Subscription User', array_values($currentUser->roles)) && !in_array('administrator', array_values($currentUser->roles)) && !in_array('Pamela', array_values($currentUser->roles))) {
				$form['7'][0] = array(
					'#markup' => 'You are not subscribed to this service. Please contact Georgia Lobby to upgrade.'
				);
			}
			if (!in_array('Bill Watch User', array_values($currentUser->roles)) && !in_array('Bundled Subscription User', array_values($currentUser->roles)) && !in_array('administrator', array_values($currentUser->roles)) && !in_array('Pamela', array_values($currentUser->roles)) && !in_array('Board Watch User', array_values($currentUser->roles))) {
				$form['5'][0] = array(
					'#markup' => 'You are not subscribed to this service. Please contact Georgia Lobby to upgrade.'
				);
			}
			if (!in_array('Bundled Subscription User', array_values($currentUser->roles)) && !in_array('administrator', array_values($currentUser->roles)) && !in_array('Pamela', array_values($currentUser->roles))) {
				$form['8'][0] = array(
					'#markup' => 'You are not subscribed to this service. Please contact Georgia Lobby to upgrade.'
				);
			}
			if (!in_array('Government Watch User', array_values($currentUser->roles)) && !in_array('Bundled Subscription User', array_values($currentUser->roles)) && !in_array('administrator', array_values($currentUser->roles)) && !in_array('Pamela', array_values($currentUser->roles))) {
				$form['6'][0] = array(
					'#markup' => 'You are not subscribed to this service. Please contact Georgia Lobby to upgrade.'
				);
			}
			
		}
	}

	/*
	 * Custom handlers - 1st redirects term additions back to user subs pg
	 * 2nd redirects CW user to main CW page
	 * 3rd validates user values entered for matching email domain and empty required values
	 */
	function galobby_watch_custom_taxa_submit($form, &$form_state)  {
		global $user;
		$uid = $user->uid;
		$path = 'user/' . $uid . '/subscriptions/taxa';
		taxonomy_form_term_submit($form, $form_state);
		$form_state['redirect'] = $path;
	}
	
	function galobby_watch_redirectpamela_submit($form, &$form_state)  {
        $log = "Simplified notice: the send/save button on " . $form['title']['#value'] . " was just clicked at ". date("h:i:sa") . ".";
        $type = "GA Lobby Notice";
        watchdog($type, $log, $variables = array(), $severity = WATCHDOG_INFO, $link = NULL);
        drupal_set_message('E-mail notice ' . $node->title . ' was just saved at ' . date("h:i:sa") . '.');
		$path = 'node/add/old-notice';
        //drupal_goto("http://galobby.com/$path");  //force page redirect
		$form_state['redirect'] = $path;
        ob_flush();
        // unset($_GET['destination']);
        
	}

	function galobby_watch_custom_notice_validate($form, &$form_state)  {
		if ($form['field_boardcommittee']['und']['#value'] == NULL && $form['field_govtdept']['und']['#value'] == NULL) {
			if ($form_state['field_select_category']['und']['#value'] == 'boardnote') {
				form_set_error('field_boardcommittee', 'A committee must be selected for a Board Watch notice.');
			}
			elseif ($form_state['field_select_category']['und']['#value'] == 'govtnote') {
				form_set_error('field_govtdept', 'A department must be selected for a Government Watch notice.');
			}
			form_set_error('field_boardcommittee', 'A committee or department must be selected for a notice.');
		}
		//let's check date validity and either kick back an error or format appropriately if incorrectly formatted
		//dpm($form);
		//dpm($form_state);
		$startTime = $form['field_starts_time']['und']['0']['#value']['value']['time'];
		$startDate = substr($form_state['values']['field_starts']['und']['0']['value'], 0, 10);
		$endTime = $form['field_ends_time']['und']['0']['#value']['value']['time'];
		$endDate = substr($form_state['values']['field_ends']['und']['0']['value'], 0, 10);
		
		if (strtotime($startDate) < strtotime('00:00:00')) {
			form_set_error('field_starts', 'A valid date must not be in the past.');
		}
		if (strtotime($endDate) < strtotime('00:00:00')) {
			form_set_error('field_ends', 'A valid date must not be in the past.');
		}
		
		
		
		preg_match_all('/(\d+)/', $startTime, $startArr);
		preg_match_all('/(\d+)/', $endTime, $endArr);
		preg_match_all('/([aApP][mM])/', $startTime, $startampm);
		preg_match_all('/([aApP][mM])/', $endTime, $endampm);	
		
		$starthour = $startArr[0][0];
		$startmin = $startArr[0][1];
		$endhour = $endArr[0][0];
		$endmin = $endArr[0][1];
		
		if ($startampm == NULL) {
		//set an error if no am/pm is provided
			form_set_error('field_starts_time', 'A valid time must have am/pm defined.');
		}
		if ($endampm == NULL) {
		//set an error if no am/pm is provided
			form_set_error('field_ends_time', 'A valid time must have am/pm defined.');
		}
		
		if ($startampm[0][0] == 'pm' && $starthour != '12') {
			// EDT 16 instead of 12 to account for UTC -4
			// EST 17
			if (strtotime($startDate) < strtotime('2016-03-13')) {
				$starthour = $starthour + 17;
			}
			else {
				$starthour = $starthour + 16;
			}
		}
		elseif ($startampm[0][0] == 'am' && $starthour == '12' ) {
			// EDT 4 to account for UTC -4
			// EST 05
			if (strtotime($startDate) < strtotime('2016-03-13')) {
				$starthour = '05';
			}
			else {
				$starthour = '04';
			}
		}
		elseif ($startampm[0][0] == 'am' || $starthour == '12' ) {
			// EDT 4 to account for UTC -4
			// EST 5
			if (strtotime($startDate) < strtotime('2016-03-13')) {
				$starthour = $starthour + 5;
			}
			else {
				$starthour = $starthour + 4;
			}
		}
		if ($endampm[0][0] == 'pm' && $endhour != '12') {
			// EDT 16 instead of 12 to account for UTC -4
			// EST 17
			if (strtotime($endDate) < strtotime('2016-03-13')) {
				$endhour = $endhour + 17;
			}
			else {
				$endhour = $endhour + 16;
			}
		}
		elseif ($endampm[0][0] == 'am' && $endhour == '12' ) {
			// EDT 4 to account for UTC -4
			// EST 5
			if (strtotime($endDate) < strtotime('2016-03-13')) {
				$endhour = '05';
			}
			else {
				$endhour = '04';
			}
		}
		elseif ($endampm[0][0] == 'am' || $endhour == '12' ) {
			// EDT 4 to account for UTC -4
			// EST 5
			if (strtotime($endDate) < strtotime('2016-03-13')) {
				$endhour = $endhour + 5;
			}
			else {
				$endhour = $endhour + 4;
			}
		}
		
		if ($startampm[0][0] == 'PM' && $starthour != '12') {
			// EDT 16 instead of 12 to account for UTC -4
			// EST 17
			if (strtotime($startDate) < strtotime('2016-03-13')) {
				$starthour = $starthour + 17;
			}
			else {
				$starthour = $starthour + 16;
			}
		}
		elseif ($startampm[0][0] == 'AM' && $starthour == '12' ) {
			// EDT 4 to account for UTC -4
			// EST 5
			if (strtotime($startDate) < strtotime('2016-03-13')) {
				$starthour = '05';
			}
			else {
				$starthour = '04';
			}
		}
		elseif ($startampm[0][0] == 'AM') {
			// EDT 4 to account for UTC -4
			// EST 5
			if (strtotime($startDate) < strtotime('2016-03-13')) {
				$starthour = $starthour + 5;
			}
			else {
				$starthour = $starthour + 4;
			}
		}
		if ($endampm[0][0] == 'PM' && $endhour != '12') {
			// EDT 16 instead of 12 to account for UTC -4
			// EST 17
			if (strtotime($endDate) < strtotime('2016-03-13')) {
				$endhour = $endhour + 17;
			}
			else {
				$endhour = $endhour + 16;
			}
		}
		elseif ($endampm[0][0] == 'AM' && $endhour == '12' ) {
			// EDT 4 to account for UTC -4
			// EST 5
			if (strtotime($endDate) < strtotime('2016-03-13')) {
				$endhour = '05';
			}
			else {
				$endhour = '04';
			}
		}
		elseif ($endampm[0][0] == 'AM') {
			// EDT 4 to account for UTC -4
			// EST 5
			if (strtotime($endDate) < strtotime('2016-03-13')) {
				$endhour = $endhour + 5;
			}
			else {
				$endhour = $endhour + 4;
			}
		}

		if (strlen($starthour) <= 1) {
			$starthour = '0' . $starthour;
		}
		if (strlen($endhour) <= 1) {
			$endhour = '0' . $endhour;
		}
		if ($starthour >= 24) {
			$starthour = $starthour - 24;
		}
		if ($endhour >= 24) {
			$endhour = $endhour - 24;
		}

		$formattedstarttime = $startDate . ' ' . $starthour . ':' . $startmin . ':00';
		$formattedendtime = $endDate . ' ' . $endhour . ':' . $endmin . ':00';
		$form_state['values']['field_starts_time']['und']['0']['value'] = $formattedstarttime;
		$form_state['values']['field_ends_time']['und']['0']['value'] = $formattedendtime;
		
		//dpm($form_state);
	}
	
	//gotta fix the parflicky date/time bug... manually create the form_state date to what it should be based on form input values
	function galobby_watch_custom_bwgw_notice_validate($form, &$form_state)  {
		$formValue2date = $form['field_date1']['und']['0']['#value']['value2']['date'];
		$formValue2time = $form['field_date1']['und']['0']['#value']['value2']['time'];
		$formValue1time = $form['field_date1']['und']['0']['#value']['value']['time'];
		$formValue1date = $form['field_date1']['und']['0']['#value']['value']['date'];
		
		if ($formValue1date != NULL && $formValue2date != NULL) {
			if ($formValue1date == $formValue2date && $formValue1time == NULL) {
					$form['field_date1']['und']['0']['all_day']['#value'] = 1;
					$form_state['values']['field_date1']['und']['0']['all_day'] = 1;
					preg_match_all('/(\d+)/', $formValue1date, $dateArr);
					$formyear = $dateArr[0][2];
					$formmonth = $dateArr[0][0];
					$formday = $dateArr[0][1];
					$formatteddatetime = $formyear . '-' . $formmonth . '-' . $formday . ' 04:00:00';
					$form_state['values']['field_date1']['und']['0']['value'] = $formatteddatetime;
					$form_state['values']['field_date1']['und']['0']['value2'] = $formatteddatetime;			
			}
			elseif ($formValue1time != NULL && $formValue2time == NULL) {
					form_set_error('date', t('An event must have an end date and time.'));
			}
			else {
				preg_match_all('/(\d+)/', $formValue2date, $dateArr);
				preg_match_all('/(\d+)/', $formValue2time, $timeArr);
				preg_match_all('/([aApP][mM])/', $formValue2time, $ampm);
		
				$formyear = $dateArr[0][2];
				$formmonth = $dateArr[0][0];
				$formday = $dateArr[0][1];
				$formhour = $timeArr[0][0];
				$formmin = $timeArr[0][1];
		
				if ($ampm[0][0] == 'pm' && $formhour != '12') {
					//16 instead of 12 to account for UTC -4
					$formhour = $formhour + 16;
				}
				elseif ($ampm[0][0] == 'am' || $formhour == '12' ) {
					//4 to account for UTC -4
					$formhour = $formhour + 4;
				}
				if ($formhour >= 24) {
					$formhour = $formhour - 24;
					$formday = $formday + 1;
				}
				//add in leading zeros for expected formatting
				if (strlen($formmonth) <= 1) {
					$formmonth = '0' . $formmonth;
				}
				if (strlen($formday) <= 1) {
					$formday = '0' . $formday;
				}
				if (strlen($formhour) <= 1) {
					$formhour = '0' . $formhour;
				}
		
				$formatteddatetime = $formyear . '-' . $formmonth . '-' . $formday . ' ' . $formhour . ':' . $formmin . ':00';
				$form_state['values']['field_date1']['und']['0']['value2'] = $formatteddatetime;
				$form_state['values']['field_date1']['und']['0']['show_todate'] = 1;
				$form_state['input']['field_date1']['und']['0']['show_todate'] = 1;
			}
		}
		
		if ($formValue2date == NULL) {
				form_set_error('date', t('An event must have an end date and time.'));
		}
		if ($formValue1date	== NULL) {
			$form_state['values']['field_use_date']['und']['0']['value'] = 1;
		}
	}

	function galobby_watch_custom_cw_submit($form, &$form_state)  {
		$path = 'node/client-watch';
		$form_state['redirect'] = $path;
	}
	function galobby_watch_custom_contract_validate($form, &$form_state)  {
		$emailContact = $form['field_email']['und'][0]['email']['#value'];
		$domain = strstr($emailContact, '@');
		$n = 1;
		while ($n <= 20)  {
			$fieldNameName = 'field_user_' . $n . '_full_name';
			$fieldNameCell = 'field_user_' . $n . '_cell_phone';
			$fieldNameEmail = 'field_user_' . $n . '_email';
			$userName = $form[$fieldNameName]['und'][0]['value']['#value'];
			if ($userName != NULL)  {
				$userEmail = $form[$fieldNameEmail]['und'][0]['email']['#value'];
				$userCell = $form[$fieldNameCell]['und'][0]['value']['#value'];
				if ($userEmail == NULL)  {
					form_set_error($fieldNameEmail, 'The email address for user #' . $n . ' is a required field when the full name is entered.');
				}
				if ($userCell == NULL)  {
					form_set_error($fieldNameCell, 'The cell phone for user #' . $n . ' is a required field when the full name is entered.');
				}
			}
			$n++;
		}
	}
		
	/**
	 * Implements hook_date_combo_process_alter().
	 *
	 * Force date format
	 */
	function galobby_watch_date_combo_process_alter(&$element, &$form_state, $context) {
		if ($element['#field_name'] == 'field_starts' || $element['#field_name'] == 'field_ends') {
 	 		$element['value']['#date_format'] = 'D, M j, Y';
		}
	}
	
	/* 
	 * Hook subscriptions_queue_alter to bypass subs module
	 */
	function galobby_watch_subscriptions_queue_alter($event) {
		unset($event);
		$event = array();
	}
	
	/*
	 * hook node_postinsert from Hook Post Action module to speed up notice node save.
	 */
	function galobby_watch_node_postinsert($node)  {
		
		if ($node->type == 'old_notice')  {
			//Start to create notice from Pamela's input
            //log the creation of the regular notice
            $log = "Simplified notice: " . $node->title . " was just saved at ". date("h:i:sa") . ".";
            $type = "GA Lobby Notice";
            watchdog($type, $log, $variables = array(), $severity = WATCHDOG_INFO, $link = NULL);
            
            $log = "Regular notice: " . $node->title . " is starting to be saved from simplified notice (post-insert) at ". date("h:i:sa") . ".";
            $type = "GA Lobby Notice";
            watchdog($type, $log, $variables = array(), $severity = WATCHDOG_INFO, $link = NULL);
			$noticeNode = new stdClass();
			$noticeNode->title = $node->title;
			$noticeNode->language = LANGUAGE_NONE;
			$noticeNode->uid = $node->uid;
			$noticeNode->body = $node->body;
			if ($node->field_select_category['und'][0]['value'] == 'boardnote') {
				$noticeNode->type = 'notice';
				if ($node->field_boardcommittee != NULL) {
					$noticeNode->field_boardcommittee[$noticeNode->language] = $node->field_boardcommittee[$node->language];
				}
				else {
					$noticeNode->field_boardcommittee[$noticeNode->language][0]['tid'] = 139;
				}	
			}
			elseif($node->field_select_category['und'][0]['value'] == 'govtnote') {
				$noticeNode->type = 'government_watch_notice';
				if ($node->field_govtdept != NULL) {
					$noticeNode->field_govtdept[$noticeNode->language] = $node->field_govtdept[$node->language];
				}
				else {
					$noticeNode->field_govtdept[$noticeNode->language]['tid'] = 144;
				}
			}
			//let's move all the pieces into their appropriate (ie, matching) fields
			$noticeNode->field_location[$noticeNode->language] = $node->field_location[$node->language];
			$noticeNode->field_fileupload[$noticeNode->language] = $node->field_fileupload[$node->language];
			
			$noticeNode->field_use_date[$noticeNode->language][0]['value'] = $node->field_use_date[$node->language][0]['value'];
			
			//if "do not use" is deselected and the checkbox for start/end text is selected...
			if($node->field_use_start_notes[$node->language][0]['value'] == 1 && $node->field_use_date[$node->language][0]['value'] == 0) {
				$noticeNode->field_datestart[$noticeNode->language][0]['value'] = $node->field_datestart[$node->language][0]['value'];
			}
			else {
				$noticeNode->field_datestart[$noticeNode->language][0]['value'] = NULL;
			}
			if($node->field_use_end_notes[$node->language][0]['value'] == 1 && $node->field_use_date[$node->language][0]['value'] == 0) {
				$noticeNode->field_dateend[$noticeNode->language][0]['value'] = $node->field_dateendtext[$node->language][0]['value'];
				$noticeNode->field_dateendtext[$noticeNode->language][0]['value'] = $node->field_dateendtext[$node->language][0]['value'];
			}
			else {
				$noticeNode->field_dateend[$noticeNode->language][0]['value'] = NULL;
				$noticeNode->field_dateendtext[$node->language][0]['value'] = NULL;
			}
			
			//date fields one to one... date1 field filled and formatted below....
			if($node->field_use_start_date[$node->language][0]['value'] == 1 && $node->field_starts[$node->language][0]['value'] != NULL) {
				$noticeNode->field_starts[$noticeNode->language][0]['value'] = $node->field_starts[$node->language][0]['value'];
			} 
            else
            {
              $noticeNode->field_starts = NULL;
            }
            
			if($node->field_use_start_time[$node->language][0]['value'] == 1 && $node->field_starts_time[$node->language][0]['value'] != NULL) {
				$noticeNode->field_starts_time[$noticeNode->language][0]['value'] = $node->field_starts_time[$node->language][0]['value'];
				$noticeNode->field_starts_time[$noticeNode->language][0]['timezone'] = 'America/New_York';
				$noticeNode->field_starts_time[$noticeNode->language][0]['timezone_db'] = 'UTC';
				$noticeNode->field_starts_time[$noticeNode->language][0]['date_type'] = 'datetime';
			}
			if($node->field_use_end_date[$node->language][0]['value'] == 1 && $node->field_ends[$node->language][0]['value'] != NULL) {
				$noticeNode->field_ends[$noticeNode->language][0]['value'] = $node->field_ends[$node->language][0]['value'];
			}
			if($node->field_use_end_time[$node->language][0]['value'] == 1 && $node->field_ends_time[$node->language][0]['value'] != NULL) {
				$noticeNode->field_ends_time[$noticeNode->language][0]['value'] = $node->field_ends_time[$node->language][0]['value'];
				$noticeNode->field_ends_time[$noticeNode->language][0]['timezone'] = 'America/New_York';
				$noticeNode->field_ends_time[$noticeNode->language][0]['timezone_db'] = 'UTC';
				$noticeNode->field_ends_time[$noticeNode->language][0]['date_type'] = 'datetime';
			}
			
			//date1 field on notices should only be filled in the case that ALL pieces (start date, start time, end date, end time) are available... otherwise, that field needs to be NULL
			if($node->field_use_start_date[$node->language][0]['value'] == 0 || $node->field_use_start_time[$node->language][0]['value'] == 0 || $node->field_use_end_date[$node->language][0]['value'] == 0 || $node->field_use_end_time[$node->language][0]['value'] == 0 || $node->field_use_date[$node->language][0]['value'] == 1) {
				 //More added to fix date/time bug 2-18-16
                $noticeNode->field_date1 = NULL;
                $noticeNode->field_starts_time = NULL;
                $noticeNode->field_ends_time = NULL;
                $noticeNode->field_starts = NULL;
                $noticeNode->field_ends = NULL;
                $log = "Regular notice: " . $noticeNode->title . " setting date fields to NULL at ". date("h:i:sa") . ".";
                $type = "GA Lobby Notice";
                watchdog($type, $log, $variables = array(), $severity = WATCHDOG_INFO, $link = NULL);
			}
			
			else {
				//convert dates and times on Pamela notice to something that the main notice types can use
				$startTime = $node->field_starts_time[$node->language][0]['value'];
				$endTime = $node->field_ends_time[$node->language][0]['value'];
				$endDate = substr($node->field_ends[$node->language][0]['value'], 0, 10);
				$startDate = substr($node->field_starts[$node->language][0]['value'], 0, 10);
				if ($startTime != NULL) {
					$startTime1 = substr($startTime, 11);
					preg_match_all('/(\d+)/', $startTime1, $timeArr);
					preg_match_all('/([aApP][mM])/', $startTime1, $ampm1);
					$formhour = $timeArr[0][0];
					$formmin = $timeArr[0][1];
					$startTime1 = $formhour . ':' . $formmin . ':00';
					if ($formhour < 5) {
							preg_match_all('/(\d+)/', $startDate, $dateArr);
		
							$formyear = $dateArr[0][0];
							$formmonth = $dateArr[0][1];
							$formday = $dateArr[0][2];
		
							$formday = $formday + 1;
							
							if ($formday > 28 && $formmonth == 2) {
								$formmonth++;
								$formday = 1;
							}
							
							elseif ($formday == 31) {
								switch($formmonth) {
									case 4:
										$formmonth++;
										$formday = 1;
										break;
									case 6:
										$formmonth++;
										$formday = 1;
										break;
									case 9: 
										$formmonth++;
										$formday = 1;
										break;
								}
							}
							
							elseif ($formday > 31) {
								$formmonth++;
								$formday = 1;
								if ($formmonth > 12) {
									$formyear++;
									$formmonth = 1;
								}
							}
							
							$startDate = $formyear . '-' . $formmonth . '-' . $formday;
							
                            
							$log = "Watch notice " . $node->title . " has a start time of " . $startTime1 . " and start date of " . $startDate . ".";
							$type = "GA Lobby Notice";
							watchdog($type, $log, $variables = array(), $severity = WATCHDOG_WARNING, $link = NULL);
                           
					}
				}
				if ($endTime != NULL) {
					$endTime1 = substr($endTime, 11);
					preg_match_all('/(\d+)/', $endTime1, $timeArr1);
					preg_match_all('/([aApP][mM])/', $endTime1, $ampm1);
					$formhour1 = $timeArr1[0][0];
					$formmin1 = $timeArr1[0][1];
					$endTime1 = $formhour1 . ':' . $formmin1 . ':00';
					if ($formhour1 < 5) {
							preg_match_all('/(\d+)/', $endDate, $dateArr);
		
							$formyear = $dateArr[0][0];
							$formmonth = $dateArr[0][1];
							$formday = $dateArr[0][2];
		
							$formday = $formday + 1;
							
							if ($formday > 28 && $formmonth == 2) {
								$formmonth++;
								$formday = 1;
							}
							
							elseif ($formday == 31) {
								switch($formmonth) {
									case 4:
										$formmonth++;
										$formday = 1;
										break;
									case 6:
										$formmonth++;
										$formday = 1;
										break;
									case 9: 
										$formmonth++;
										$formday = 1;
										break;
								}
							}
							
							elseif ($formday > 31) {
								$formmonth++;
								$formday = 1;
								if ($formmonth > 12) {
									$formyear++;
									$formmonth = 1;
								}
							}

					}
				}
				
				$sdt = $startDate . ' ' . $startTime1;
				$edt = $endDate . ' ' . $endTime1;	
									
				$noticeNode->field_date1[$noticeNode->language][0]['value'] = $sdt;
				$noticeNode->field_date1[$noticeNode->language][0]['value2'] = $edt;
				$noticeNode->field_date1[$noticeNode->language][0]['timezone'] = 'America/New_York';
				$noticeNode->field_date1[$noticeNode->language][0]['timezone_db'] = 'UTC';
				$noticeNode->field_date1[$noticeNode->language][0]['date_type'] = 'datetime';
			}
            $log = "Regular notice: " . $noticeNode->title . " is starting the save process (post-insert, simplified) at ". date("h:i:sa") . ".";
            $type = "GA Lobby Notice";
            watchdog($type, $log, $variables = array(), $severity = WATCHDOG_INFO, $link = NULL);
			node_save($noticeNode);
            $log = "Regular notice: " . $noticeNode->title . " has finished being saved from simplified notice (post-insert) at ". date("h:i:sa") . ".";
            $type = "GA Lobby Notice";
            watchdog($type, $log, $variables = array(), $severity = WATCHDOG_INFO, $link = NULL);
        // Added 2/16/16 to try and prevent stuck message problem to free up field_ data elements Joe
        field_cache_clear();
        $path = 'node/add/old-notice';  //force page redirect
        drupal_goto("http://galobby.com/$path");  //force page redirect
        // Changed to all caches because of memory usage - 2-19-2016 Joe
        //drupal_flush_all_caches();
		}

	}
	
	/*
	 * Hook node_insert... 
	 */
	function galobby_watch_node_insert($node)  {

	   if ($node->type == 'notice' || $node->type == 'government_watch_notice') {
			$nid = $node->nid;
            $log = "Regular notice: " . $node->title . " is starting to be processed for subscriptions (node insert) at ". date("h:i:sa") . ".";
            $type = "GA Lobby Notice";
            watchdog($type, $log, $variables = array(), $severity = WATCHDOG_INFO, $link = NULL);
			
			//pull all tids into single array
			$allTerms1 = array();
			$keywordsField = $node->field_keywords[$node->language];
			if ($keywordsField != NULL) {
				$n = 0;
				foreach ($keywordsField as $keyArray) {
					foreach ($keyArray as $keyTerm) {
						$allTerms1[] = $keyTerm;
						$n++;
					}
				}
			}
			$billsField = $node->field_billterms[$node->language];
			if ($billsField != NULL) {
				$n = 0;
				foreach ($billsField as $billArray) {
					foreach ($billArray as $billTerm) {
						$allTerms1[] = $billTerm;
						$n++;
					}
				}
			}
			$boardField = $node->field_boardcommittee[$node->language];
			if ($boardField != NULL) {
				$n = 0;
				foreach ($boardField as $boardArray) {
					foreach ($boardArray as $boardTerm) {
						$allTerms1[] = $boardTerm;
						$n++;
					}
				}
			}
			$govtField = $node->field_govtdept[$node->language];
			if ($govtField != NULL) {
				$n = 0;
				foreach ($govtField as $govtArray) {
					foreach ($govtArray as $govtTerm) {
						$allTerms1[] = $govtTerm;
						$n++;
					}
				}
			}
			
            $allTerms = array_unique($allTerms1);
            $allTerms1 = NULL; //free memory
            unset($allTerms1); //free memory
            
			$special = FALSE; //Test committees - 11970 and 11974
                              //Special committee - 18572
                              //All Board Watch committee - 139
            
            if (in_array("11970", $allTerms) || in_array("11974", $allTerms)) {
              $special = TRUE;
              $userids = array(
	                    1 => '1',
						//2 => '2',
						//3 => '5',
						//4 => '22004',
						//5 => '20741',
						//6 => '20268',
						//7 => '218'
                        );
               }
            elseif (in_array("18572", $allTerms)) {
             	$special = TRUE;
                $userids = variable_get('mail_retry_array');
				if ($userids == NULL) {
                       $userids = array(
	                    1 => '1',
						2 => '2');
            		}
            		sort($userids);
					variable_set('mail_retry_array', array(
	                    1 => '1',
						2 => '2'));
				}
			
            elseif (in_array("139", $allTerms)) {
              $special = TRUE;
              $singleTid = 139;
              $usersForSubs = db_query('SELECT DISTINCT recipient_uid FROM subscriptions WHERE value = :single_tid', array(':single_tid' => $singleTid));
              foreach ($usersForSubs as $userid) {
                  $userids[] = $userid->recipient_uid;
            }
            sort($userids); 
            }
            
            
			//process array for subs and write them to subscriptions_queue
			foreach ($allTerms as $singleTid) {
				if ($special == FALSE) {
					$usersForSubs = db_query('SELECT DISTINCT recipient_uid FROM subscriptions WHERE value = :single_tid', array(':single_tid' => $singleTid));
					foreach ($usersForSubs as $user1) {
						$loaded = db_query('SELECT name FROM users WHERE uid = :uid', array(':uid' => $user1->recipient_uid));
						foreach ($loaded as $username) {
							$name1 = $username->name;
						}
						$tableSubs = 'subscriptions_queue';
						$recordSubs = new stdClass();
						$recordSubs->uid = $user1->recipient_uid;
						$recordSubs->name = $name1;
						$recordSubs->module = 'node';
						$recordSubs->field = 'tid';
						$recordSubs->value = $singleTid;
						$recordSubs->author_uid = 1;
						$recordSubs->send_interval = 1;
						$recordSubs->digest = -1;
						$recordSubs->load_args = $node->nid;
						$recordSubs->load_function = 'subscriptions_content_load_node';
						$recordSubs->is_new = 1;
						$recordSubs->last_sent = 0;
						$recordSubs->suspended = 0;
						drupal_write_record($tableSubs, $recordSubs);
					}
				}
				else {   
					foreach ($userids as $user1) {
						$loaded = db_query('SELECT name FROM users WHERE uid = :uid', array(':uid' => $user1));
						foreach ($loaded as $username) {
							$name1 = $username->name;
						}
						$tableSubs = 'subscriptions_queue';
						$recordSubs = new stdClass();
						$recordSubs->uid = $user1;
						$recordSubs->name = $name1;
						$recordSubs->module = 'node';
						$recordSubs->field = 'tid';
						$recordSubs->value = $singleTid;
						$recordSubs->author_uid = 1;
						$recordSubs->send_interval = 1;
						$recordSubs->digest = -1;
						$recordSubs->load_args = $node->nid;
						$recordSubs->load_function = 'subscriptions_content_load_node';
						$recordSubs->is_new = 1;
						$recordSubs->last_sent = 0;
						$recordSubs->suspended = 0;
						drupal_write_record($tableSubs, $recordSubs);
					}
				}
			}

            $recordSubs = NULL; //free memory
            unset($recordSubs); //free memory
            $allTerms = NULL; //free memory
            unset($allTerms); //free memory
            $usersForSubs = NULL; //free memory
            unset($UsersForSubs); //free memory
            $loaded = NULL; //free memory
            unset($loaded); //free memory
            
            $log = "Regular notice: " . $node->title . " is finished being processed for subscriptions (node insert) at ". date("h:i:sa") . ".";
            $type = "GA Lobby Notice";
            watchdog($type, $log, $variables = array(), $severity = WATCHDOG_INFO, $link = NULL);
		}
	}
    
	/*
	 * Use hook_ms_membership_signup($account, $membership, $m_plan) to create contract node
	 */
	function galobby_watch_ms_membership_signup($account, $membership, $m_plan)  {
    
    /** COMMENTED OUT NOT NEEDED 12/23/15 **/

	}

	/*  
	 * Function pulls in text from full text PDF on GA leg. site.  
	 * Needs cleaned up URL of full text PDF and initialized PDF2Text object ($a). 
	 */
	function galobby_watch_fulltext_importer($cleanURL, $a, $bt, $bn) {
		if (@file_get_contents($cleanURL)) {
		  $pdf = $a->parseFile($cleanURL);
          $text = $pdf->getText();
        }
        else
        {
          $text = " ";
		  $log = "WARNING - " . $cleanURL . " not found on state website for " . $bt . $bn . ".";
		  $type = "GA Lobby Cron";
		  watchdog($type, $log, $variables = array(), $severity = WATCHDOG_WARNING, $link = NULL);
        }
        return $text;		
	}

	/*
	 * Function searches an imported HTML dom object for a given string and returns the needed item depending on the string.
	 */
	function galobby_watch_find_item($string, $html2)  {
		$int = 0;
		$itemBars = $html2->find('div.itemBar b i');
		foreach ($itemBars as $itemBar)  {
			if ($itemBar == $string)  {
				if($string == '<i>First Reader Summary</i>')  {
					$item = $html2->find('div.item', $int);
					return $item;
				}
				if($string == '<i>Sponsored By</i>') {
					$item = $html2->find('div.item', $int)->first_child()->first_child()->innertext;
					return $item;
				}
				$item = $html2->find('div.item', $int)->first_child();
				return $item;
			}
			else  {
				$int++;
			}
		}
	}
			
	/*
	 * Function to compare listed bills in body field to existing bills, replace short bill with long bill title, tag notice nodes with bill terms and keywords
	 */
	function galobby_watch_compare_bills($node) {
		$bodyStr = $node->body[$node->language][0]['value'];
		// Change RegEx to only match BillTypeBillNumber with no space or anything else	
		preg_match_all('/([hHsS][bBrR]\d+)/', $bodyStr, $matches);	
		foreach($matches as $matches3) {
			foreach($matches3 as $singleMatch3) {
				$billMatches[] = $singleMatch3;
			}
		}
		if($billMatches != NULL) {
			$matches1[] = array_unique($billMatches);
			$noticeKeyInt = 0;
			$noticeBillInt = 0;	
			if (!empty($matches1)) {	
				foreach($matches1 as $matches2) {
				foreach($matches2 as $match) {
					if($match != NULL) {
						//if there are bills, let's load them and pull off the terms
						$query = new EntityFieldQuery();
						$entities = $query->entityCondition('entity_type', 'node')
							->propertyCondition('type', 'bill_testing')
							->propertyCondition('title', $match)
							->execute();
						if (!empty($entities['node'])) {
  							$billNode = node_load(current(array_keys($entities['node'])));
							$billLongTitle = $billNode->field_billdescrip[$billNode->language][0]['value'];
			   				//get bill term for tagging
			   				$billterm = $billNode->field_billterms[$billNode->language][0]['tid'];
							if (isset($billNode->field_keywords[$billNode->language][0])) {
								$keywordsField = db_query('SELECT keyword FROM galobby_keywords WHERE bill_term = :bill_term', array(':bill_term' => $billterm));
								if ($keywordsField != NULL) {
									foreach ($keywordsField as $keyArray) {
										//dpm($keyArray);
										foreach ($keyArray as $keyTerm) {
											//dpm($keyTerm);
											if ($keyTerm != NULL) {
												$tidsToAdd[] = $keyTerm;
											}
										}
									}
									if ($tidsToAdd != NULL) {
										foreach ($tidsToAdd as $singleTid) {
											//add keywords to notice
											$node->field_keywords[$node->language][$noticeKeyInt]['tid'] = $singleTid;
											$noticeKeyInt++;
										}
									}
								}
							}
							//add bill terms to notice - code added by Joe to check for NULL billterm
							if ($billterm == NULL) {				
								$errmessage = 'WARNING - bill term ' . $billNid . ' not found while tagging notice ' . $node->title . ".";
								drupal_set_message($errmessage,'warning'); 
							}
							else {
								$node->field_billterms[$node->language][$noticeBillInt]['tid'] = $billterm;
								$noticeBillInt++;
							}	
						}
                        else
                        {
                          $billnotexist = "1";
                        }
						preg_match('/([hHsS][bBrR])/', $match, $billPre);
						preg_match('/(\d+)/', $match, $billNum);
    					$billtype = $billPre[0];
    					$billtype = strtolower($billtype);
    					$billnumber = $billNum[0];
						/**
						$billURL = '<a href="http://www.legis.ga.gov/legislation/en-US/Display/20152016/' . $billtype . '/' . $billnumber . '">' . $billLongTitle . '</a>';							
						$pattern = '/\b' . $match . '\b/';
                        **/
                        // Add code to check for wrong long bill title on non-existant bill references
                        if ($billnotexist == "1") {
                          $billLongTitle = strtoupper($billtype) . " " . $billnumber;
                          // Turn this back off to fix bug where regular bills follow anticipatory 2-12-16 Joe
                          $billnotexist = "0";  
                        }
                        $billURL = '<a href="http://galobby.com/bill/' . $billtype . $billnumber . '">' . $billLongTitle . '</a>';
                        $pattern = '/\b(?<!\/)' . $match . '\b/';
						$bodyStr = preg_replace($pattern, $billURL, $bodyStr);					}
				}
				}
			}
			$node->body[$node->language][0]['value'] = $bodyStr;
		}
	}

	/*  
	 * Function creates bill term from given string
	 */
	function galobby_watch_create_bill_term($newTerm) {
		$term = new stdClass();
		// Check to make sure term is 250 characters < 255
		$newTerm = substr($newTerm, 0, 250); 
		$term->name = $newTerm;
		$term->vid = 7; 
		taxonomy_term_save($term);
		$tid = $term->tid;
		return $tid;
	}

	/*  
	 * Function updates bill term from given string
	 */
	function galobby_watch_update_bill_term($newTermName, $tid) {
		$term = taxonomy_term_load($tid);
		if ($term->vid == 7) {
		    // Check to make sure term is 250 characters < 255
		    $newTermName = substr($newTermName, 0, 250); 
			$term->name = $newTermName;
			$term->vid = 7; 
			taxonomy_term_save($term);
		}
	}
	
	/*
	 * Function checks the status of the "do not use date on notice" field for notices and then removes date
	 * field values. Next handles copy of bill data to Client Watch bill.  Last checks and handles workflow for 
	 * contract and user creation.
	 */
	function galobby_watch_node_presave($node)  {
	
		if ($node->type == 'old_notice') {
			
			if($node->field_use_date[$node->language][0]['value'] == 1) {
				$node->field_use_start_date[$node->language][0]['value'] = 0;
				$node->field_use_end_date[$node->language][0]['value'] = 0;
				$node->field_use_start_time[$node->language][0]['value'] = 0;
				$node->field_use_end_time[$node->language][0]['value'] = 0;
				$node->field_use_start_notes[$node->language][0]['value'] = 0;
				$node->field_use_end_notes[$node->language][0]['value'] = 0;
				$node->field_datestart[$node->language][0]['value'] = NULL;
				$node->field_dateend[$node->language][0]['value'] = NULL;
				$node->field_dateendtext[$node->language][0]['value'] = NULL;
				$node->field_starts_date[$node->language][0]['value'] = NULL;
				$node->field_ends_date[$node->language][0]['value'] = NULL;
				$node->field_starts_time[$node->language][0]['value'] = NULL;
				$node->field_ends_time[$node->language][0]['value'] = NULL;
			}
			
			if($node->field_use_start_time[$node->language][0]['value'] == 0 || $node->field_use_start_date[$node->language][0]['value'] == 0) {
				$node->field_starts_time = NULL;
                //Changed 2-4-16 Joe to fix bug
                //$node->field_starts_time[$node->language][0]['value'] = NULL;
				//$node->field_starts_time[$node->language][0]['value2'] = NULL;
			}
			
			if($node->field_use_end_time[$node->language][0]['value'] == 0 || $node->field_use_end_date[$node->language][0]['value'] == 0) {
				$node->field_ends_time = NULL;
                //Changed 2-4-16 Joe to fix bug
                //$node->field_ends_time[$node->language][0]['value'] = NULL;
				//$node->field_ends_time[$node->language][0]['value2'] = NULL;
			}
		}
	
		if ($node->type == 'notice' || $node->type == 'government_watch_notice') {
			// Diagnostic information
			$log = "INFO " . date("h:i:sa") . " - Beginning of regular notice processing for bill references (node pre-save) for " . $node->title . "...";
			$type = "GA Lobby Notice";
			watchdog($type, $log, $variables = array(), $severity = WATCHDOG_INFO, $link = NULL);
       
			$notUseDate = $node->field_use_date[$node->language][0]['value'];
				if ($notUseDate)  {
					unset($node->field_date1);
					$node->field_dateend[$node->language][0]['value'] = NULL;
					$node->field_dateendtext[$node->language][0]['value'] = NULL;
				}
				else  {
					unset($node->field_use_date);
					$startDate = $node->field_date1[$node->language][0]['value'];
					$endDate = $node->field_date1[$node->language][0]['value2'];
				}
                
            // Check to see if bill terms are already there.
            if ($node->field_billterms[$node->language] != NULL) {            
              $log = "INFO " . date("h:i:sa") . " - Bill terms for " . $node->title . " were found. No need to do it again. Skip processing.";
              $type = "GA Lobby Notice";
			  watchdog($type, $log, $variables = array(), $severity = WATCHDOG_INFO, $link = NULL);
              }
              else
              {
              $log = "INFO " . date("h:i:sa") . " - Bill terms for " . $node->title . " were NOT found, about to process them.";
              $type = "GA Lobby Notice";
			  watchdog($type, $log, $variables = array(), $severity = WATCHDOG_INFO, $link = NULL);
              galobby_watch_compare_bills($node);
              }
                               
			// Diagnostic information
		    $log = "INFO " . date("h:i:sa") . " - Finished regular notice processing of bill references (node pre-save) for " . $node->title . "...";
		    $type = "GA Lobby Notice";
		    watchdog($type, $log, $variables = array(), $severity = WATCHDOG_INFO, $link = NULL);
		}
		//Jan 8th 2015 - Client Watch: handle title creation, copy bill data from bill node in database, flag and add subscriptions as needed
		if ($node->type == 'client_watch') {
			$type = $node->field_bill_type[$node->language][0]['value'];
			$num = $node->field_bill_number[$node->language][0]['value'];
			if ($node->title == NULL) {
				$billNodeTitle = $type . $num;
				$node->title = $billNodeTitle;
			}
			else {
				$billNodeTitle = $node->title;
			}
			if ($type == NULL || $num == NULL) {
				preg_match('/([hHsS][bBrR])/', $node->title, $billty);
				preg_match('/(\d+)/', $node->title, $billnu);
				$billtype15 = $billty[0];
    			$billnumber15 = $billnu[0];
				$node->field_bill_type[$node->language][0]['value'] = $billtype15;
				$node->field_bill_number[$node->language][0]['value'] = $billnumber15;
			}
			$query = new EntityFieldQuery();
			$entities = $query->entityCondition('entity_type', 'node')
				->propertyCondition('type', 'bill_testing')
				->propertyCondition('title', $billNodeTitle)
				->execute();
			if (!empty($entities['node'])) {
				$billNode = node_load(current(array_keys($entities['node'])));
				$node->field_billdescrip[$node->language][0]['value'] = $billNode->field_billdescrip[$billNode->language][0]['value'];
				$node->field_billdescrip[$node->language][0]['format'] = 'full_html';
				$addtobb = $node->field_billboard[$node->language][0]['value'];
				//if add to Bill Board selected, create a new flag for the related bill on Bill Board
				if ($addtobb == 'Yes')  {
					$notAdded = TRUE;
						if ($billNode->title == $billNodeTitle && $notAdded == TRUE)  {
							$nidToFlag = $billNode->nid;
							$uidFlagging = $node->uid;
							//if bill is already flagged, errors occur so check that bill isn't already flagged before trying to write a new db row for it
							$flaggedresults = db_query('SELECT uid FROM flagging WHERE entity_id = :entity_id AND fid = :fid', array(':entity_id' => $nidToFlag, ':fid' => 1));
							foreach($flaggedresults as $flagresult) {
								if ($flagresult->uid == $uidFlagging) {
									drupal_set_message('Bill ' . $billNodeTitle . ' is already part of your Bill Board bills.');
									$notAdded = FALSE;
								}
							}
							if ($notAdded == TRUE) {
								$tableFlag = 'flagging';
								$recordFlag = new stdClass();
								$recordFlag->fid = 1;
								$recordFlag->entity_type = 'node';
								$recordFlag->entity_id = $nidToFlag;
								$recordFlag->uid = $uidFlagging;
								$recordFlag->sid = 0;
								drupal_write_record($tableFlag, $recordFlag);
								$notAdded = FALSE;
								drupal_set_message('You have added bill ' . $billNodeTitle . ' to your Bill Board bills.');
							}
						}
				}
				$addtobw = $node->field_bill_watch[$node->language][0]['value'];
				//if add to Bill Watch selected, create a subscription for the related bill term
				if ($addtobw == 'Yes')  {
					$BWNotAdded = TRUE; 
						$nidToFlag = $billNode->nid;
						$billTid = $billNode->field_billterms[$billNode->language][0]['tid'];
						$authorUid = $node->uid;
						$flaggedresults = db_query('SELECT uid FROM flagging WHERE entity_id = :entity_id AND fid = :fid', array(':entity_id' => $nidToFlag, ':fid' => 3));
						foreach($flaggedresults as $flagresult) {
							if ($flagresult->uid == $authorUid) {
								drupal_set_message('Bill ' . $billNodeTitle . ' is already part of your Bill Watch bills.');
								$BWNotAdded = FALSE;
							}
						}
						if ($BWNotAdded == TRUE) {
							//flagging table
							$tableFlag = 'flagging';
							$recordFlag = new stdClass();
							$recordFlag->fid = 3;
							$recordFlag->entity_type = 'node';
							$recordFlag->entity_id = $nidToFlag;
							$recordFlag->uid = $authorUid;
							$recordFlag->sid = 0;
							drupal_write_record($tableFlag, $recordFlag);
							//subs table
							$tableSubs = 'subscriptions';
							$recordSubs = new stdClass();
							$recordSubs->module = 'node';
							$recordSubs->field = 'tid';
							$recordSubs->value = $billTid;
							$recordSubs->recipient_uid = $authorUid;
							$recordSubs->send_interval = 1;
							$recordSubs->author_uid = -1;
							$recordSubs->send_updates = 1;
							$recordSubs->send_comments = 0;
							drupal_write_record($tableSubs, $recordSubs);
							drupal_set_message('You have added bill ' . $billNodeTitle . ' to your Bill Watch bills.');
						}
				}
				$node->field_linkfulltext[$node->language][0]['format'] = 'full_html';
				$node->field_linkfulltext[$node->language][0]['value'] = $billNode->field_linkfulltext[$billNode->language][0]['value'];
				$node->field_descrip[$node->language][0]['value'] = $billNode->field_descrip[$billNode->language][0]['value'];
				$node->field_descrip[$node->language][0]['format'] = 'full_html';
				$node->field_sponsor[$node->language][0]['value'] = $billNode->field_sponsor[$billNode->language][0]['value'];
				$node->field_sponsor[$node->language][0]['format'] = 'filtered_html';
				$node->field_status[$node->language][0]['value'] = $billNode->field_status[$billNode->language][0]['value'];
				$node->field_status[$node->language][0]['format'] = 'full_html';
				$node->field_committee[$node->language][0]['value'] = $billNode->field_committee[$billNode->language][0]['value'];
				$node->field_committee[$node->language][0]['format'] = 'filtered_html';
			}
			elseif (empty($entities['node'])) {
				drupal_set_message('Please check your bill type and bill number. ' . $billNodeTitle . ' may not have been filed in the Georgia Legislature yet.');
			}
		}
		
		if ($node->type == 'contracts')  {
			//handle renewal year set up
			$startDate = $node->field_contract_start_date[$node->language][0]['value'];
			$renewField = $node->field_renewal_due_date[$node->language][0]['value'];
			if ($startDate != NULL && $renewField == NULL)  {
				$startYear = intval(substr($startDate, 0, 4));
				$restofDate = substr($startDate, 4);
				$startYear++;
				$renewDate = $startYear . $restofDate;
				$node->field_renewal_due_date[$node->language][0]['value'] = $renewDate;
				$node->field_renewal_due_date[$node->language][0]['timezone'] = 'America/New_York';
				$node->field_renewal_due_date[$node->language][0]['timezone_db'] = 'America/New_York';
				$node->field_renewal_due_date[$node->language][0]['date_type'] = 'datetime';
			}


		}
	}
		
	/*
	 * Cron function to finish user membership processing - uses cron to avoid order of ops errors
	 */
	function galobby_watch_membership_processing() {
		//pull in memberships that need to be added
		$userstoEmail = NULL;
		$results = db_query('SELECT * FROM {galobby_membership_processing}');
		foreach ($results as $result) {
			if($result->mpid != NULL  && $result->mpid != 0) {
				if($result->uid != NULL) {
				$newUser = user_load($result->uid);
				if($newUser != NULL) {
				$m_plan = ms_membership_load_membership_plan($result->mpid);
				$membership = ms_membership_insert_new_membership($m_plan, $newUser, $mail = FALSE);
				if ($result->renewal != NULL) {
					ms_membership_change_membership_expiration($membership->mid, $result->renewal);
				}
				//remember to email users if they are new
				if ($result->send_email == 1) {
					$userstoEmail[] = $result->uid;
				}
				// add the "All" term subscriptions as necessary
				if ($result->mpid == 1) {
					//bundled user mpid 1
						$tableSubs = 'subscriptions';
						$recordSubs = new stdClass();
						$recordSubs->module = 'node';
						$recordSubs->field = 'tid';
						$recordSubs->value = '139';
						$recordSubs->recipient_uid = $newUser->uid;
						$recordSubs->send_interval = 1;
						$recordSubs->author_uid = -1;
						$recordSubs->send_updates = 1;
						$recordSubs->send_comments = 0;
						drupal_write_record($tableSubs, $recordSubs);
					
						$recordSubs2 = new stdClass();
						$recordSubs2->module = 'node';
						$recordSubs2->field = 'tid';
						$recordSubs2->value = '144';
						$recordSubs2->recipient_uid = $newUser->uid;
						$recordSubs2->send_interval = 1;
						$recordSubs2->author_uid = -1;
						$recordSubs2->send_updates = 1;
						$recordSubs2->send_comments = 0;
						drupal_write_record($tableSubs, $recordSubs2);
						
						ms_membership_change_roles($result->uid, $add = array(10), $remove = array(5));
				}
				
				if ($result->mpid == 2) {
					//board user mpid 2
						$tableSubs = 'subscriptions';
						$recordSubs = new stdClass();
						$recordSubs->module = 'node';
						$recordSubs->field = 'tid';
						$recordSubs->value = '139';
						$recordSubs->recipient_uid = $newUser->uid;
						$recordSubs->send_interval = 1;
						$recordSubs->author_uid = -1;
						$recordSubs->send_updates = 1;
						$recordSubs->send_comments = 0;
						drupal_write_record($tableSubs, $recordSubs);
						
						ms_membership_change_roles($result->uid, $add = array(6), $remove = array(5));
				}
				if ($result->mpid == 3) {		
					//gov't user mpid 3
						$tableSubs = 'subscriptions';
						$recordSubs = new stdClass();
						$recordSubs->module = 'node';
						$recordSubs->field = 'tid';
						$recordSubs->value = '144';
						$recordSubs->recipient_uid = $newUser->uid;
						$recordSubs->send_interval = 1;
						$recordSubs->author_uid = -1;
						$recordSubs->send_updates = 1;
						$recordSubs->send_comments = 0;
						drupal_write_record($tableSubs, $recordSubs);
						
						ms_membership_change_roles($result->uid, $add = array(7), $remove = array(5));
				}
				if ($result->mpid == 4) {		
					//bill user mpid 4
						$tableSubs = 'subscriptions';
						$recordSubs = new stdClass();
						$recordSubs->module = 'node';
						$recordSubs->field = 'tid';
						$recordSubs->value = '139';
						$recordSubs->recipient_uid = $newUser->uid;
						$recordSubs->send_interval = 1;
						$recordSubs->author_uid = -1;
						$recordSubs->send_updates = 1;
						$recordSubs->send_comments = 0;
						drupal_write_record($tableSubs, $recordSubs);
						
						ms_membership_change_roles($result->uid, $add = array(9), $remove = array(5));
				}
				}}
			}
			$Useragain = user_load($result->uid);
			if ($Useragain != NULL) {
				$queryNid = new EntityFieldQuery();
				$entitiesContracts = $queryNid->entityCondition('entity_type', 'node')
					->propertyCondition('type', 'contracts')
					->fieldCondition('field_subscribers', 'target_id', $Useragain->uid, '=')
					->execute();
				if (!empty($entitiesContracts['node']))  {
					$contractNode = node_load(current(array_keys($entitiesContracts['node'])));
					$edit = array(
						'field_company' => array(
							'und' => array(
								0 => array(
									'target_id' => $contractNode->nid,
								),
							),
						),
					);
					user_save($Useragain, $edit);	
				}
			}
		}
		if ($userstoEmail != NULL) {
			//check for duplicates and then email
			$users = array_unique($userstoEmail);
			foreach ($users as $uid)  {
				$user = user_load($uid);
				$results2 = db_query('SELECT pkey FROM {galobby_membership_processing} WHERE uid = :uid', array(':uid' => $uid));
				foreach ($results2 as $result2) {
					$pass = $result2->pkey;
				}
  				drupal_mail('galobby_watch', 'new_user', $user->mail, user_preferred_language($user), array(username => $user->name , password => $pass), 'office@galobby.com', TRUE);
			}
		}
		//remove entries from db so duplicate emails don't happen
		db_query('DELETE FROM {galobby_membership_processing}');
	}
	
	/**
	 * Implement hook_mail to send mail to newly created users and renewals to contact person
	 */
	function galobby_watch_mail($key, &$message, $params) {
		$newparam['headers'] = array(
			'Bcc' => 'office.admin@galobby.com',
		);
		$message['headers'] += $newparam['headers'];
		switch($key) {
			case 'new_user':
				$message['subject'] = "Georgia Lobby user account has been created for you";
				$message['body'] = 'Hello ' . $params['username'] . ",<br /><br />  We have created an account for you to the Georgia Lobby website.  We look forward to serving you as a new subscriber to Georgia Lobby. <br /><br />  You can access it at <a href=" . '"http//galobby.com/user/">http://galobby.com/user</a> and log in with your email address and the password: ' . $params['password'] . '.<br /><br /> We encourage you to login to your account and edit your user profile and settings. Setting your preferences for the Watch Notices will facilitate the usefulness of your Georgia Lobby subscription. We will be most happy to assist you with the editing of these preferences.  Please contact Georgia Lobby at 770.461.2778 or <a href="mailto:office@galobby.com">office@galobby.com</a> if you would like assistance with changing your settings or if you have any trouble with your account.<br /><br /> - Georgia Lobby';
				break;
			case 'renewal':
				$message['subject'] = 'Georgia Lobby subscription due for renewal';
				$message['body'] = 'Hello ' . $params['firstname'] . ',<br /><br />Your Georgia Lobby subscription will soon be up for renewal.  Do not let this important resource to you for your lobbying effort be disrupted.  Please send your renewal payment by ' . $params['renewalDate'] . ' so that you will have a continuation of services from Georgia Lobby.  Your service with be automatically disconnected on your renewal date, if your payment has not been received.  You may contact Georgia Lobby prior your renewal date, if you believe your payment may be delayed. Georgia Lobby will be happy to intervene, so no disconnect will occur.<br /></br /> It has been a pleasure to serve you this year.  <br /></br />Pamela Adams<br />Georgia Lobby';
				$log = "GA Lobby renewal message sent.";
				$type = "GA Lobby Contract Renewal";
				watchdog($type, $log, $variables = array(), $severity = WATCHDOG_WARNING, $link = NULL);
				break;
            case 'stuckqueue':
				$message['subject'] = 'WARNING - the GaLobby.com system is fixing a notice queue problem!';
				$message['body'] = 'WARNING - The GaLobby.com notice queue encountered a problem with the most recent notice.  The system will attempt to resolve the problem automatically. There will be a short delay and the notice will be sent as soon as it is fixed.';
				break;    
		}
	}
	
	/**
	 * Implement MoneyScripts expiring soon hook: 
	 * hook_ms_membership_expiring_soon($account, $membership, $m_plan)
	 * Use to send expiry emails to contract contact person.
	 */
	function galobby_watch_ms_membership_expiring_soon($account, $membership, $m_plan) {
		//get the organization that the user is associated with and use that to load contract
		$org = $account->field_org[$account->language][0]['value'];
		if ($org != NULL) {	
			$query = new EntityFieldQuery();
			$entities = $query->entityCondition('entity_type', 'node')
				->propertyCondition('type', 'contract')
				->propertyCondition('title', $org)
				->execute();
			if (!empty($entities['node'])) {
				//load info about contact person if the query returned a node
  				$contractNode = node_load(current(array_keys($entities['node'])));
				$contactPersonFN = $contractNode->field_first_name[$contractNode->language][0]['value'];
				$contactPersonLN = $contractNode->field_last_name[$contractNode->language][0]['value'];
				$contactEmail = $contractNode->field_email[$contractNode->language][0]['email'];
				$renewDate = $contractNode->field_renewal_due_date[$contractNode->language][0]['value'];
				//get when the last email notice was sent to that person
				$sendNotice = FALSE;
				$results = db_query('SELECT dateEmailed FROM {galobby_renewal_emails} WHERE contactEmail = :email', array(':email' => $contactEmail));	
				foreach ($results as $date)  {
					if ($date != NULL)  {
						$monthAgo = strtotime('-30 days');
						if ($date < $monthAgo)  {
							$sendNotice = TRUE;
						}
					}
				}
				if ($sendNotice == TRUE)  {	
					// Send the e-mail about renewal to contact person
  					drupal_mail('galobby_watch', 'renewal', $contactEmail, user_preferred_language($account), array(firstname => $contactPersonFN, lastname => $contactPersonLN, renewalDate => $renewDate), 'office@galobby.com', TRUE);
					// Delete last record for email
					db_query('DELETE FROM {galobby_renewal_emails} WHERE contactEmail = :email', array(':email' => $contactEmail));
					// Record in database when the last email was sent
					$table = 'galobby_renewal_emails';
					$record = new stdClass();
					$record->contactEmail = $contactEmail;
					$record->dateEmailed = strtotime("now");
					drupal_write_record($table, $record);
					$log = "GA Lobby renewal message queued for " . $contactPersonFN . ' ' . $contactPersonLN;
					$type = "GA Lobby Contract Renewal";
					watchdog($type, $log, $variables = array(), $severity = WATCHDOG_WARNING, $link = NULL);
				}
			}
		}
	}
	
	/**
	 * React to flagging of content - add Bill Watch subs to subscriptions table
	 * hook_flag_flag($flag, $content_id, $account, $flagging)
	 */
	function galobby_watch_flag_flag($flag, $content_id, $account, $flagging) {
		if ($flagging->flag_name == 'bill_watch_flag') {
			$notAdded = TRUE;
			$bill = node_load($flagging->entity_id);
			$billTid = $bill->field_billterms[$bill->language][0]['tid'];
			$userUid = $flagging->uid;
			$subsresults = db_query('SELECT recipient_uid FROM subscriptions WHERE value = :value', array(':value' => $billTid));
			foreach($subsresults as $subresult) {
				if ($subresult->recipient_uid == $userUid) {
					$notAdded = FALSE;
				}
			}
			if ($notAdded == TRUE) {
				$tableSubs = 'subscriptions';
				$recordSubs = new stdClass();
				$recordSubs->module = 'node';
				$recordSubs->field = 'tid';
				$recordSubs->value = $billTid;
				$recordSubs->recipient_uid = $userUid;
				$recordSubs->send_interval = 1;
				$recordSubs->author_uid = -1;
				$recordSubs->send_updates = 1;
				$recordSubs->send_comments = 0;
				drupal_write_record($tableSubs, $recordSubs);
			}
		}
		if ($flagging->flag_name == 'client_watch_bills') {
			$bill = node_load($flagging->entity_id);
			$billDescrib = $bill->field_billdescrip[$bill->language][0]['value'];
			$queryCW = new EntityFieldQuery();
			$entitiesBW = $queryCW->entityCondition('entity_type', 'node')
				->propertyCondition('type', 'client_watch')
				->propertyCondition('uid', $flagging->uid)
				->fieldCondition('field_billdescrip', 'value', $billDescrib, '=')
				->execute();
			if (empty($entitiesBW['node'])) {
				$title = $bill->title;
				$html3 = new simple_html_dom();
				$a3 = new PDF2Text();
				//Pull out bill prefix and number and create URL to pull data from
				preg_match('/([hHsS][bBrR])/', $title, $billPre3);
				preg_match('/(\d+)/', $title, $billNum3);
    			//$billtype3 = $billPre3[0];
    			//$billtype3 = strtoupper($billtype3);
                //Change 2-10-2016 JD
                $billtype3 = substr($title, 0, 2);
    			$billnumber3 = $billNum3[0];
    			//Updated URL on Dec. 2nd 2014 for upcoming session
				$baseurl3 = 'http://www.legis.ga.gov/legislation/en-US/Display/20152016/';
    			$url3 = $baseurl3 . $billtype3 . '/' . $billnumber3;
				//Pull in data and clean it up where needed
				$html3->load_file($url3);
				$longTitle = $html3->find('div.ggah1');
				$fullTextURL = $html3->find('div.ScreenOnly div a');
				//Clean up bill description for long title usage
				$billLen = strlen($title)+2;
 				$billToDes = $billLen+53;
   				$shortBill = substr($longTitle[0], 49, $billLen);
   				$billDes = substr($longTitle[0], $billToDes, -6);
   				$billTitle = $shortBill . ' - ' . $billDes;
				$node = new stdClass();
				$node->type = 'client_watch';
				if ($title != NULL) {
					$node->title = $title;
				}
				else {
					$node->title = $shortBill;
				}
				$node->language = LANGUAGE_NONE;
				$node->uid = $flagging->uid;
				$node->field_billdescrip[$node->language][0]['value'] = $billTitle;
				$node->field_billdescrip[$node->language][0]['format'] = 'full_html';
				$node->field_linkfulltext[$node->language][0]['format'] = 'full_html';
				$node->field_linkfulltext[$node->language][0]['value'] = $fullTextURL;
				$sponsors = galobby_watch_find_item('<i>Sponsored By</i>', $html3);
				$committees = galobby_watch_find_item('<i>Committees</i>', $html3);
				$summary = galobby_watch_find_item('<i>First Reader Summary</i>', $html3);
				$status = galobby_watch_find_item('<i>Status History</i>', $html3);
				$node->field_descrip[$node->language][0]['value'] = $summary;
				$node->field_descrip[$node->language][0]['format'] = 'full_html';
				$node->field_sponsor[$node->language][0]['value'] = $sponsors;
				$node->field_sponsor[$node->language][0]['format'] = 'filtered_html';
				$node->field_status[$node->language][0]['value'] = $status;
				$node->field_status[$node->language][0]['format'] = 'full_html';
				$node->field_committee[$node->language][0]['value'] = $committees;
				$node->field_committee[$node->language][0]['format'] = 'filtered_html';
				$node->field_bill_type[$node->language][0]['value'] = $billtype3;
				$node->field_bill_number[$node->language][0]['value'] = $billnumber3;
				node_save($node);
				unset($html3);
                field_cache_clear();
			}
		}
	}
	
	/**
	 * React to unflagging of content - remove Bill Watch subs from subscriptions table
	 * hook_flag_unflag($flag, $content_id, $account, $flagging)
	 */
	function galobby_watch_flag_unflag($flag, $content_id, $account, $flagging) {
		if ($flagging->flag_name == 'bill_watch_flag') {
			$delete = FALSE;
			$bill = node_load($flagging->entity_id);
			$billTid = $bill->field_billterms[$bill->language][0]['tid'];
			$userUid = $flagging->uid;
			$subsresults = db_query('SELECT recipient_uid FROM subscriptions WHERE value = :value', array(':value' => $billTid));
			foreach($subsresults as $subresult) {
				if ($subresult->recipient_uid == $userUid) {
					$delete = TRUE;
				}
			}
			if ($delete == TRUE) {
				db_query('DELETE FROM subscriptions WHERE value = :value AND recipient_uid = :recipient_uid', array(':value' => $billTid, ':recipient_uid' => $userUid));
			}
		}
	}
	
	/**
	 * Implement hook_taxonomy_term_insert
	 * At keyword creation, this function will automatically subscribe user to term and return success message.
	 */
	function galobby_watch_taxonomy_term_insert($term) {
		//is term of type keyword?
		if ($term->vid == 8) {
			global $user;
			$uid = $user->uid;
			$tid = $term->tid;
			$termName = $term->name;
			$table = 'subscriptions';
			$record = new stdClass();
			$record->module = 'node';
			$record->field = 'tid';
			$record->value = $tid;
			$record->recipient_uid = $uid;
			$record->send_interval = 1;
			$record->author_uid = -1;
			$record->send_updates = 1;
			$record->send_comments = 0;
			drupal_write_record($table, $record);
			drupal_set_message('You have been successfully subscribed to keyword: "' . $termName . '".','status');
		}
	}

	/*
	 * Add cron job to add bill term/keyword associations to galobby_keywords table
	 */
	function galobby_watch_tagging_cron() {	
        $message = "Beginning GA Lobby cron job for QA, Code Watch tagging, and Client Watch status update at " . date("h:i:sa") . ".";
	    $type = "GA Lobby Cron";
	    watchdog($type, $message, $variables = array(), $severity = WATCHDOG_NOTICE, $link = NULL);
    
        // Check and fix bills that might be missing code watch FIRST PASS
        // New code, March 8, 2016 to speed up process.
        // Lets try a single pass first

        $vocab = taxonomy_vocabulary_load('8');
        //$loadedbills = node_load_multiple(array(), array('type' => 'bill_testing'));
        //Corrected empty array to FALSE to load everything and not generate error
        $loadedbills = node_load_multiple(FALSE, array('type' => 'bill_testing'));
          foreach ($loadedbills as $billNode) {
             if ( !(isset($billNode->field_keywords[$billNode->language])) )  
              {
              $billLongTitle = $billNode->field_billdescrip[$billNode->language][0]['value'];
              if ((substr($billLongTitle, -8) != "Website."))
                {
				$keywordterms = rules_autotag_extract($billNode->field_fulltext[$billNode->language][0]['value'], $vocab);
				$i = 0;
				foreach ($keywordterms as $tid) {
					$billNode->field_keywords[$billNode->language][$i]['tid'] = $tid;
					$i++;
				}
                node_save($billNode);
                $message = "(Pass 1) Fixing missing Code Watch on " . $billLongTitle . ".";
	            $type = "GA Lobby QA";
	            watchdog($type, $message, $variables = array(), $severity = WATCHDOG_NOTICE, $link = NULL);
    		    }
		      }
        }

		//clear table first to avoid multiple bill/keyword relationships from cluttering table and slowing things down
		db_query('TRUNCATE galobby_keywords');
		//load all bills and add the bill term from each for each keyword term tid to the table
		//$loadedbills = node_load_multiple(array(), array('type' => 'bill_testing'));
        $loadedbills = node_load_multiple(FALSE, array('type' => 'bill_testing'));
		foreach ($loadedbills as $billNode) {
			$billterm = $billNode->field_billterms[$billNode->language][0]['tid'];
			if ($billterm != NULL && isset($billNode->field_keywords[$billNode->language]))  {
				$keywordsField = $billNode->field_keywords[$billNode->language];
				foreach ($keywordsField as $keyArray) {
					foreach ($keyArray as $keyTerm) {
						//write the association to the table
						$table = 'galobby_keywords';
						$record = new stdClass();
						$record->bill_term = $billterm;
						$record->keyword = $keyTerm;
						drupal_write_record($table, $record);
					}
				}
			}
		}
        $loadedbills = NULL; //free memory
        unset($loadedbills); //free memory
        $keywordsField = NULL; //free memory
        unset($keywordsField); //free memory
        $keyArray = NULL; //free memory
        unset($keyArray); //free memory
        
        
        //Update client watch bill status if needed 2-10-16 JD
        //$loadedcwbills = node_load_multiple(array(), array('type' => 'client_watch'));
        $loadedcwbills = node_load_multiple(FALSE, array('type' => 'client_watch')); 
        $i = 1; 
        foreach ($loadedcwbills as $cwbillnode) { 
        $title = strtoupper($cwbillnode->field_bill_type[$cwbillnode->language][0]['value'].$cwbillnode->field_bill_number[$cwbillnode->language][0]['value']); 
        $result = db_query("SELECT n.nid FROM {node} n WHERE n.title = :title AND n.type = :type", array(":title"=> $title, ":type"=> 'bill_testing')); 
        $bill = node_load($result->fetchField()); 
        if ( $cwbillnode->field_status[$cwbillnode->language][0]['value'] != $bill->field_status[$bill->language][0]['value'] ) { 
        echo $i++ . " Fixing Bill: " . $title . ", CW Status:" . $cwbillnode->field_status[$cwbillnode->language][0]['value'] . ", Bill status: " . $bill->field_status[$bill->language][0]['value'] . "\n"; 
        $cwbillnode->field_status[$cwbillnode->language][0]['value'] = $bill->field_status[$bill->language][0]['value']; 
        node_save($cwbillnode); 
} 
unset($bill); 
}
        $loadedcwbills = NULL; //free memory
        unset($loadedcwbills); //free memory
        $cwbillnode = NULL; //free memory
        unset($cwbillnode); //free memory
        $cwbillnode = NULL; //free memory
        unset($cwbillnode); //free memory
        $result = NULL; //free memory
        unset($result); //free memory
        
                 
        $message = "Completed GA Lobby cron job for QA, Code Watch tagging, and Client Watch status update at " . date("h:i:sa") . ".";
	    $type = "GA Lobby Cron";
	    watchdog($type, $message, $variables = array(), $severity = WATCHDOG_NOTICE, $link = NULL);
	}
			
/*
 * Cron to remove unneeded roles from users so that they don't see weird role conflicting stuff
 */
function galobby_watch_clean_subscriber_roles() {
	//start with highest level perms, Bundled Subscription - rid 10
	$userswbund = db_query('SELECT uid FROM {users_roles} WHERE rid = :rid', array(':rid' => '10'));
	foreach ($userswbund as $auser) {
		ms_membership_change_roles($auser->uid, $add = array(), $remove = array(4, 5, 6, 7, 8, 9));
	}
	//move to next level perms, Bill Watch Subscription - rid 9... users can also have gov't so don't remove that one - rid 7
	$userswbill = db_query('SELECT uid FROM {users_roles} WHERE rid = :rid', array(':rid' => '9'));
	foreach ($userswbill as $buser) {
		ms_membership_change_roles($buser->uid, $add1 = array(), $remove1 = array(4, 5, 6, 8));
	}
	//next level perms, Gov't Watch Subscription - rid 7... users can also have Board Watch so don't remove that one - rid 6
	$userswgovt = db_query('SELECT uid FROM {users_roles} WHERE rid = :rid', array(':rid' => '7'));
	foreach ($userswgovt as $cuser) {
		ms_membership_change_roles($cuser->uid, $add2 = array(), $remove2 = array(4, 5, 8));
	}
	//next level perms, Board Watch Subscription - rid 6
	$userswboard = db_query('SELECT uid FROM {users_roles} WHERE rid = :rid', array(':rid' => '6'));
	foreach ($userswboard as $duser) {
		ms_membership_change_roles($duser->uid, $add3 = array(), $remove3 = array(4, 5, 8));
	}
}

/* 
 * Functions go through all URLs numerically until bill not found on legislative site and updates and adds bill nodes as needed
 */

function galobby_watch_nightly_updater($billtype_nc)  {
	//Set up simple html, pdf, url variables and load existing bill nodes
	$html_nc = new simple_html_dom();
	// Reference new parser
    $a_nc = new \Smalot\PdfParser\Parser();
	$billExists_nc = TRUE;
	$billnumber_nc = 1;
	//Updated URL on Dec. 2nd 2014 for upcoming session
	$baseurl_nc = 'http://www.legis.ga.gov/legislation/en-US/Display/20152016/';
   	$loadedNodes_nc = node_load_multiple(array(), array('type' => 'bill_testing'));
	$n = 0;
	while ($billExists_nc)  {
		$bill_nc = $billtype_nc . $billnumber_nc;
		$url_nc = $baseurl_nc . $billtype_nc . '/' . $billnumber_nc;
		$html_nc->load_file($url_nc);
		$longTitle_nc = $html_nc->find('div.ggah1');
		//Make sure that bill with prefix and number exists on GA leg. site by seeing if there is a long descrip
		if ($longTitle_nc != NULL) {
			$foundBill_nc = FALSE;
			//if bill exists, check bill short title against bill nodes' titles, if bill node exists, update full text and sponsors (keyword tagging happens via Rules but needs reset to NULL for that to take place), else if doesn't exist, create bill node
			foreach($loadedNodes_nc as $singleNode_nc) {
				if ($singleNode_nc->title == $bill_nc && $foundBill_nc != TRUE) {
					$cleanURL_nc = $singleNode_nc->field_linkfulltext[$singleNode_nc->language][0]['value'];
					if ($cleanURL_nc != NULL) {
					    $fullTextURL_nc = $html_nc->find('div.ScreenOnly div a');
                        //Clean up URL of PDF address to prepare for full text import 
                        $fullURL_nc = $fullTextURL_nc[0];
                        $endURL_nc = strpos($fullURL_nc, 'pdf"');
                        $URLpos_nc = $endURL_nc-6;
                        $cleanURL_nc1 = substr($fullURL_nc, 9, $URLpos_nc);
						$pdf_nc = galobby_watch_fulltext_importer($cleanURL_nc1, $a_nc, $billtype_nc, $billnumber_nc);
						$pdfCleaned_nc = $pdf_nc;
						$singleNode_nc->field_fulltext[$singleNode_nc->language][0]['format'] = 'full_html';
						$singleNode_nc->field_fulltext[$singleNode_nc->language][0]['value'] = $pdfCleaned_nc;
						//Clean up bill description for long title usage
						$billLen_nc = strlen($bill_nc)+2;
 						$billToDes_nc = $billLen_nc+53;
   						$shortBill_nc = substr($longTitle_nc[0], 49, $billLen_nc);
   						$billDes_nc = substr($longTitle_nc[0], $billToDes_nc, -6);
   						$billTitle_nc = $shortBill_nc . ' - ' . $billDes_nc;
						$singleNode_nc->field_billdescrip[$singleNode_nc->language][0]['value'] = $billTitle_nc;
						$singleNode_nc->field_linkfulltext[$singleNode_nc->language][0]['format'] = 'full_html';
						$singleNode_nc->field_linkfulltext[$singleNode_nc->language][0]['value'] = $cleanURL_nc1;
					}
					else {
						$fullTextURL_nc = $html_nc->find('div.ScreenOnly div a');
						//Clean up bill description for long title usage
						$billLen_nc = strlen($bill_nc)+2;
 						$billToDes_nc = $billLen_nc+53;
   						$shortBill_nc = substr($longTitle_nc[0], 49, $billLen_nc);
   						$billDes_nc = substr($longTitle_nc[0], $billToDes_nc, -6);
   						$billTitle_nc = $shortBill_nc . ' - ' . $billDes_nc;
						$singleNode_nc->field_billdescrip[$singleNode_nc->language][0]['value'] = $billTitle_nc;
						//Clean up URL of PDF address to prepare for full text import 
						$fullURL_nc = $fullTextURL_nc[0];
						$endURL_nc = strpos($fullURL_nc, 'pdf"');
						$URLpos_nc = $endURL_nc-6;
						$cleanURL_nc1 = substr($fullURL_nc, 9, $URLpos_nc);
						$pdf_nc1 = galobby_watch_fulltext_importer($cleanURL_nc1, $a_nc, $billtype_nc, $billnumber_nc);
						$pdfCleaned_nc1 = $pdf_nc1;
						$singleNode_nc->field_fulltext[$singleNode_nc->language][0]['format'] = 'full_html';
						$singleNode_nc->field_fulltext[$singleNode_nc->language][0]['value'] = $pdfCleaned_nc1;
						$singleNode_nc->field_linkfulltext[$singleNode_nc->language][0]['format'] = 'full_html';
						$singleNode_nc->field_linkfulltext[$singleNode_nc->language][0]['value'] = $cleanURL_nc1;
					}
					$singleNode_nc->field_keywords[$singleNode_nc->language] = NULL;
					$sponsors_nc = galobby_watch_find_item('<i>Sponsored By</i>', $html_nc);
					$committees_nc = galobby_watch_find_item('<i>Committees</i>', $html_nc);
					$summary_nc = galobby_watch_find_item('<i>First Reader Summary</i>', $html_nc);
					$status_nc1 = galobby_watch_find_item('<i>Status History</i>', $html_nc);
					$singleNode_nc->field_descrip[$singleNode_nc->language][0]['value'] = $summary_nc;
					$singleNode_nc->field_sponsor[$singleNode_nc->language][0]['value'] = $sponsors_nc;
					$singleNode_nc->field_committee[$singleNode_nc->language][0]['value'] = $committees_nc;
					$singleNode_nc->field_status[$singleNode_nc->language][0]['value'] = $status_nc1;
					//Added May 2015 - create uniform URL aliases for use with bills across the site
					if ($singleNode_nc->path['alias'] != 'bill/' . $bill_nc) {
						$singleNode_nc->path['alias'] = 'bill/' . $bill_nc;
					}
					//Check bill term, update if needed
					$tid = $singleNode_nc->field_billterms[$singleNode_nc->language][0]['tid'];
					if ($tid != NULL) {
						$fullTerm = taxonomy_term_load($tid);
						if ($fullTerm->name != $billTitle_nc) {
							galobby_watch_update_bill_term($billTitle_nc, $tid);
						}
					}
					node_save($singleNode_nc);
                  //  field_cache_clear();
					$foundBill_nc = TRUE;
					set_time_limit(180);
				}	
			}
			if($foundBill_nc == FALSE)  {
				$fullTextURL_nc = $html_nc->find('div.ScreenOnly div a');
				//Clean up bill description for long title usage
				$billLen_nc = strlen($bill_nc)+2;
 				$billToDes_nc = $billLen_nc+53;
   				$shortBill_nc = substr($longTitle_nc[0], 49, $billLen_nc);
   				$billDes_nc = substr($longTitle_nc[0], $billToDes_nc, -6);
   				$billTitle_nc = $shortBill_nc . ' - ' . $billDes_nc;
				//Start to create new bill
				$billNode_nc = new stdClass();
				$billNode_nc->type = 'bill_testing';
				$billNode_nc->title = $bill_nc;
				$billNode_nc->language = LANGUAGE_NONE;
				$billNode_nc->comment = 2; //comments on
				$billNode_nc->field_billdescrip[$billNode_nc->language][0]['value'] = $billTitle_nc;
				$billNode_nc->field_billdescrip[$billNode_nc->language][0]['format'] = 'full_html';
				//Create bill term and tag bill with it
				$term_nc = galobby_watch_create_bill_term($billTitle_nc);
				$billNode_nc->field_billterms[$billNode_nc->language][0]['tid'] = $term_nc;
				//Clean up URL of PDF address to prepare for full text import 
				$fullURL_nc = $fullTextURL_nc[0];
				$endURL_nc = strpos($fullURL_nc, 'pdf"');
				$URLpos_nc = $endURL_nc-6;
				$cleanURL_nc1 = substr($fullURL_nc, 9, $URLpos_nc);
				$pdf_nc1 = galobby_watch_fulltext_importer($cleanURL_nc1, $a_nc, $billtype_nc, $billnumber_nc);
				$pdfCleaned_nc1 = $pdf_nc1;
				$billNode_nc->field_fulltext[$billNode_nc->language][0]['format'] = 'full_html';
				$billNode_nc->field_fulltext[$billNode_nc->language][0]['value'] = $pdfCleaned_nc1;
				$billNode_nc->field_linkfulltext[$billNode_nc->language][0]['format'] = 'full_html';
				$billNode_nc->field_linkfulltext[$billNode_nc->language][0]['value'] = $cleanURL_nc1;
				//Call data finding function for each piece of needed data
				$sponsors_nc = galobby_watch_find_item('<i>Sponsored By</i>', $html_nc);
				$committees_nc = galobby_watch_find_item('<i>Committees</i>', $html_nc);
				$summary_nc = galobby_watch_find_item('<i>First Reader Summary</i>', $html_nc);
				$status_nc1 = galobby_watch_find_item('<i>Status History</i>', $html_nc);
				$billNode_nc->field_descrip[$billNode_nc->language][0]['value'] = $summary_nc;
				$billNode_nc->field_descrip[$billNode_nc->language][0]['format'] = 'full_html';
				$billNode_nc->field_sponsor[$billNode_nc->language][0]['value'] = $sponsors_nc;
				$billNode_nc->field_sponsor[$billNode_nc->language][0]['format'] = 'full_html';
				$billNode_nc->field_status[$billNode_nc->language][0]['value'] = $status_nc1;
				$billNode_nc->field_status[$billNode_nc->language][0]['format'] = 'full_html';
				$billNode_nc->field_committee[$billNode_nc->language][0]['value'] = $committees_nc;
				$billNode_nc->field_committee[$billNode_nc->language][0]['format'] = 'full_html';
				//Added May 2015 - create uniform URL aliases for use with bills across the site
				$singleNode_nc->path['alias'] = 'bill/' . $bill_nc;
				node_save($billNode_nc);
               // field_cache_clear();
				set_time_limit(180);
			}
			$billnumber_nc++;
		}
		else {
			if($n > 1) {
				$billExists_nc = FALSE;
			}
			$n++;
			$billnumber_nc++;
		}
	}
	unset($html_nc);
	unset($a_nc);
	$billnumber_nc--;
    $billnumber_nc = $billnumber_nc - 3;
    switch ($billtype_nc) {
    case "HB":
      variable_set('galobby_last_hb', $billnumber_nc);
      break;
    case "HR":
      variable_set('galobby_last_hr', $billnumber_nc);
      break;
    case "SB":
      variable_set('galobby_last_sb', $billnumber_nc);
      break;
    case "SR":
      variable_set('galobby_last_sr', $billnumber_nc);
      break;
    }
	$message = "Completed GA Lobby cron job for " . $billtype_nc . " endpoint at " . $billnumber_nc;
	$type = "GA Lobby Cron";
	watchdog($type, $message, $variables = array(), $severity = WATCHDOG_NOTICE, $link = NULL);
}

/* 
 * Functions go through all URLs numerically until bill not found on legislative site and updates and adds bill nodes as needed
 * Changed March 2016 - speed improvements made
 */

function galobby_watch_nightly_updater_v2($billtype_nc)  {
	//Set up simple html, pdf, url variables and load existing bill nodes
	$html_nc = new simple_html_dom();
	// Reference new parser
    $a_nc = new \Smalot\PdfParser\Parser();
	$billExists_nc = TRUE;
	$billnumber_nc = 1;
	//Updated URL on Dec. 2nd 2014 for upcoming session
	$baseurl_nc = 'http://www.legis.ga.gov/legislation/en-US/Display/20152016/';
	//counter for non-consectutive bills on state legis
	$n = 0;
	while ($billExists_nc)  {
		$bill_nc = $billtype_nc . $billnumber_nc;
		$url_nc = $baseurl_nc . $billtype_nc . '/' . $billnumber_nc;
		$html_nc->load_file($url_nc);
		$longTitle_nc = $html_nc->find('div.ggah1');
		//Make sure that bill with prefix and number exists on GA leg. site by seeing if there is a long descrip
		if ($longTitle_nc != NULL) {
			//let's reset the counter for non-consectutive bills if we find one after a skipped one
			$n = 0;
			$foundBill_nc = FALSE;
			//if bill exists, check bill short title against bill nodes' titles, if bill node exists, update full text and sponsors (keyword tagging happens via Rules but needs reset to NULL for that to take place), else if doesn't exist, create bill node
			$queryNI = new EntityFieldQuery();
			$entities = $queryNI->entityCondition('entity_type', 'node')
				->propertyCondition('type', 'bill_testing')
				->propertyCondition('title', $bill_nc)
				->execute();
			if (!empty($entities['node'])) {
				$singleNode_nc = node_load(current(array_keys($entities['node'])));
				if ($foundBill_nc != TRUE) {
					$cleanURL_nc = $singleNode_nc->field_linkfulltext[$singleNode_nc->language][0]['value'];
					if ($cleanURL_nc != NULL) {
					    $fullTextURL_nc = $html_nc->find('div.ScreenOnly div a');
                        //Clean up URL of PDF address to prepare for full text import 
                        $fullURL_nc = $fullTextURL_nc[0];
                        $endURL_nc = strpos($fullURL_nc, 'pdf"');
                        $URLpos_nc = $endURL_nc-6;
                        $cleanURL_nc1 = substr($fullURL_nc, 9, $URLpos_nc);
						//if the PDF hasn't changed, let's not re-import it - changed March 7 2016
						if ($cleanURL_nc != $cleanURL_nc1) {
							$pdf_nc = galobby_watch_fulltext_importer($cleanURL_nc1, $a_nc, $billtype_nc, $billnumber_nc);
							$pdfCleaned_nc = $pdf_nc;
							$singleNode_nc->field_fulltext[$singleNode_nc->language][0]['format'] = 'full_html';
							$singleNode_nc->field_fulltext[$singleNode_nc->language][0]['value'] = $pdfCleaned_nc;
							$singleNode_nc->field_linkfulltext[$singleNode_nc->language][0]['format'] = 'full_html';
							$singleNode_nc->field_linkfulltext[$singleNode_nc->language][0]['value'] = $cleanURL_nc1;
						}
						//Clean up bill description for long title usage
						$billLen_nc = strlen($bill_nc)+2;
 						$billToDes_nc = $billLen_nc+53;
   						$shortBill_nc = substr($longTitle_nc[0], 49, $billLen_nc);
   						$billDes_nc = substr($longTitle_nc[0], $billToDes_nc, -6);
   						$billTitle_nc = $shortBill_nc . ' - ' . $billDes_nc;
						$singleNode_nc->field_billdescrip[$singleNode_nc->language][0]['value'] = $billTitle_nc;
					}
					else {
						$fullTextURL_nc = $html_nc->find('div.ScreenOnly div a');
						//Clean up bill description for long title usage
						$billLen_nc = strlen($bill_nc)+2;
 						$billToDes_nc = $billLen_nc+53;
   						$shortBill_nc = substr($longTitle_nc[0], 49, $billLen_nc);
   						$billDes_nc = substr($longTitle_nc[0], $billToDes_nc, -6);
   						$billTitle_nc = $shortBill_nc . ' - ' . $billDes_nc;
						$singleNode_nc->field_billdescrip[$singleNode_nc->language][0]['value'] = $billTitle_nc;
						//Clean up URL of PDF address to prepare for full text import 
						$fullURL_nc = $fullTextURL_nc[0];
						$endURL_nc = strpos($fullURL_nc, 'pdf"');
						$URLpos_nc = $endURL_nc-6;
						$cleanURL_nc1 = substr($fullURL_nc, 9, $URLpos_nc);
						$pdf_nc1 = galobby_watch_fulltext_importer($cleanURL_nc1, $a_nc, $billtype_nc, $billnumber_nc);
						$pdfCleaned_nc1 = $pdf_nc1;
						$singleNode_nc->field_fulltext[$singleNode_nc->language][0]['format'] = 'full_html';
						$singleNode_nc->field_fulltext[$singleNode_nc->language][0]['value'] = $pdfCleaned_nc1;
						$singleNode_nc->field_linkfulltext[$singleNode_nc->language][0]['format'] = 'full_html';
						$singleNode_nc->field_linkfulltext[$singleNode_nc->language][0]['value'] = $cleanURL_nc1;
					}
					$singleNode_nc->field_keywords[$singleNode_nc->language] = NULL;
					$sponsors_nc = galobby_watch_find_item('<i>Sponsored By</i>', $html_nc);
					$committees_nc = galobby_watch_find_item('<i>Committees</i>', $html_nc);
					$summary_nc = galobby_watch_find_item('<i>First Reader Summary</i>', $html_nc);
					$status_nc1 = galobby_watch_find_item('<i>Status History</i>', $html_nc);
					$singleNode_nc->field_descrip[$singleNode_nc->language][0]['value'] = $summary_nc;
					$singleNode_nc->field_sponsor[$singleNode_nc->language][0]['value'] = $sponsors_nc;
					$singleNode_nc->field_committee[$singleNode_nc->language][0]['value'] = $committees_nc;
					$singleNode_nc->field_status[$singleNode_nc->language][0]['value'] = $status_nc1;
					//Added May 2015 - create uniform URL aliases for use with bills across the site
					if ($singleNode_nc->path['alias'] != 'bill/' . $bill_nc) {
						$singleNode_nc->path['alias'] = 'bill/' . $bill_nc;
					}
					//Check bill term, update if needed
					$tid = $singleNode_nc->field_billterms[$singleNode_nc->language][0]['tid'];
					if ($tid != NULL) {
						$fullTerm = taxonomy_term_load($tid);
						if ($fullTerm->name != $billTitle_nc) {
							galobby_watch_update_bill_term($billTitle_nc, $tid);
						}
					}
					node_save($singleNode_nc);
                    field_cache_clear();
					$foundBill_nc = TRUE;
					set_time_limit(180);
				}	
			}
			elseif($foundBill_nc == FALSE)  {
				$fullTextURL_nc = $html_nc->find('div.ScreenOnly div a');
				//Clean up bill description for long title usage
				$billLen_nc = strlen($bill_nc)+2;
 				$billToDes_nc = $billLen_nc+53;
   				$shortBill_nc = substr($longTitle_nc[0], 49, $billLen_nc);
   				$billDes_nc = substr($longTitle_nc[0], $billToDes_nc, -6);
   				$billTitle_nc = $shortBill_nc . ' - ' . $billDes_nc;
				//Start to create new bill
				$billNode_nc = new stdClass();
				$billNode_nc->type = 'bill_testing';
				$billNode_nc->title = $bill_nc;
				$billNode_nc->language = LANGUAGE_NONE;
				$billNode_nc->comment = 2; //comments on
				$billNode_nc->field_billdescrip[$billNode_nc->language][0]['value'] = $billTitle_nc;
				$billNode_nc->field_billdescrip[$billNode_nc->language][0]['format'] = 'full_html';
				//Create bill term and tag bill with it
				$term_nc = galobby_watch_create_bill_term($billTitle_nc);
				$billNode_nc->field_billterms[$billNode_nc->language][0]['tid'] = $term_nc;
				//Clean up URL of PDF address to prepare for full text import 
				$fullURL_nc = $fullTextURL_nc[0];
				$endURL_nc = strpos($fullURL_nc, 'pdf"');
				$URLpos_nc = $endURL_nc-6;
				$cleanURL_nc1 = substr($fullURL_nc, 9, $URLpos_nc);
				$pdf_nc1 = galobby_watch_fulltext_importer($cleanURL_nc1, $a_nc, $billtype_nc, $billnumber_nc);
				$pdfCleaned_nc1 = $pdf_nc1;
				$billNode_nc->field_fulltext[$billNode_nc->language][0]['format'] = 'full_html';
				$billNode_nc->field_fulltext[$billNode_nc->language][0]['value'] = $pdfCleaned_nc1;
				$billNode_nc->field_linkfulltext[$billNode_nc->language][0]['format'] = 'full_html';
				$billNode_nc->field_linkfulltext[$billNode_nc->language][0]['value'] = $cleanURL_nc1;
				//Call data finding function for each piece of needed data
				$sponsors_nc = galobby_watch_find_item('<i>Sponsored By</i>', $html_nc);
				$committees_nc = galobby_watch_find_item('<i>Committees</i>', $html_nc);
				$summary_nc = galobby_watch_find_item('<i>First Reader Summary</i>', $html_nc);
				$status_nc1 = galobby_watch_find_item('<i>Status History</i>', $html_nc);
				$billNode_nc->field_descrip[$billNode_nc->language][0]['value'] = $summary_nc;
				$billNode_nc->field_descrip[$billNode_nc->language][0]['format'] = 'full_html';
				$billNode_nc->field_sponsor[$billNode_nc->language][0]['value'] = $sponsors_nc;
				$billNode_nc->field_sponsor[$billNode_nc->language][0]['format'] = 'full_html';
				$billNode_nc->field_status[$billNode_nc->language][0]['value'] = $status_nc1;
				$billNode_nc->field_status[$billNode_nc->language][0]['format'] = 'full_html';
				$billNode_nc->field_committee[$billNode_nc->language][0]['value'] = $committees_nc;
				$billNode_nc->field_committee[$billNode_nc->language][0]['format'] = 'full_html';
				//Added May 2015 - create uniform URL aliases for use with bills across the site
				$singleNode_nc->path['alias'] = 'bill/' . $bill_nc;
				node_save($billNode_nc);
                field_cache_clear();
				set_time_limit(180);
			}
			$billnumber_nc++;
		}
		else {
			if($n > 1) {
				$billExists_nc = FALSE;
			}
			$n++;
			$billnumber_nc++;
		}
	}
	unset($html_nc);
	unset($a_nc);
	$billnumber_nc--;
    $billnumber_nc = $billnumber_nc - 3;
    switch ($billtype_nc) {
    case "HB":
      variable_set('galobby_last_hb', $billnumber_nc);
      break;
    case "HR":
      variable_set('galobby_last_hr', $billnumber_nc);
      break;
    case "SB":
      variable_set('galobby_last_sb', $billnumber_nc);
      break;
    case "SR":
      variable_set('galobby_last_sr', $billnumber_nc);
      break;
    }
	$message = "Completed GA Lobby cron job V2 for " . $billtype_nc . " endpoint at " . $billnumber_nc;
	$type = "GA Lobby Cron";
	watchdog($type, $message, $variables = array(), $severity = WATCHDOG_NOTICE, $link = NULL);
}


/* End of Bill Importer Version 2.0 */

function galobby_watch_nightly_hb_cron()  {
//	galobby_watch_nightly_updater('HB');
// Commented out to try new improved bill importer
galobby_watch_nightly_updater_v2('HB');
}

function galobby_watch_nightly_hr_cron()  {
	galobby_watch_nightly_updater_v2('HR');
}

function galobby_watch_nightly_sb_cron()  {
	galobby_watch_nightly_updater_v2('SB');
}

function galobby_watch_nightly_sr_cron()  {
	galobby_watch_nightly_updater_v2('SR');
}

//Fixes bill terms with characters that are not whitespace but show as whitespace
function galobby_watch_fix_terms() {
	$a = taxonomy_get_tree($vid = 7, $parent = 0, $max_depth = NULL, $load_entities = TRUE);
	foreach ($a as $b)  {
  		$bname = $b->name;
   		$bnew = preg_replace("[B\W{2}]","B ", $bname);
		$bnew = preg_replace("[R\W{2}]","R ", $bnew);
 		$b->name = $bnew;
   		taxonomy_term_save($b);
	}
}

/*
 * Add cron jobs to tag notice nodes if needed and clean up galobby db table
 */
function galobby_watch_cronapi($op, $job = NULL) {
	$items['galobby_watch_nightly_hb_cron'] = array(
		'description' => 'For HB: Update full text on existing bill nodes and import new bill nodes nightly',
		'rule' => '30 0 * * *',
		'weight' => 0
		);
	$items['galobby_watch_nightly_hr_cron'] = array(
		'description' => 'For HR: Update full text on existing bill nodes and import new bill nodes nightly',
		'rule' => '45 1 * * *',
		'weight' => 0
		);
	$items['galobby_watch_nightly_sb_cron'] = array(
		'description' => 'For SB: Update full text on existing bill nodes and import new bill nodes nightly',
		'rule' => '0 3 * * *',
		'weight' => 0
		);
	$items['galobby_watch_nightly_sr_cron'] = array(
		'description' => 'For SR: Update full text on existing bill nodes and import new bill nodes nightly',
		'rule' => '15 4 * * *',
		'weight' => 0
		);
	$items['galobby_watch_membership_processing'] = array(
		'description' => 'Process memberships for new contract added subscribers',
		'rule' => '*/5 * * * *',
		'weight' => 0
		);
	$items['galobby_watch_clean_subscriber_roles'] = array(
		'description' => 'Remove extra roles added to users',
		'rule' => '45 23 * * *',
		'weight' => 0
		);
	$items['galobby_watch_tagging_cron'] = array(
		'description' => 'Runs after nightly updater to link bill term and keyword term tids in galobby_keywords table',
		'rule' => '0 5 * * *',
		'weight' => 0
		);
	$items['galobby_watch_fix_terms'] = array(
		'description' => 'Fixes non-character non-whitespace in Bill Watch terms',
		'rule' => '5 0 * * *',
		'weight' => 0
		);
	return $items;
}

/** Jan 2016 - Incremental Bill Importer (JD) **/

/* 
 * Functions go through all URLs numerically until bill not found on legislative site and updates and adds bill nodes as needed
 */

function galobby_watch_incremental_updater($billtype_nc, $billstart, $billend)  {
	//Set up simple html, pdf, url variables and load existing bill nodes
	$html_nc = new simple_html_dom();
	// Reference new parser
    $a_nc = new \Smalot\PdfParser\Parser();
	// $a_nc = new PDF2Text();
	$billExists_nc = TRUE;
	$billnumber_nc = $billstart;
	//Updated URL on Dec. 2nd 2014 for upcoming session
	$baseurl_nc = 'http://www.legis.ga.gov/legislation/en-US/Display/20152016/';
   	$loadedNodes_nc = node_load_multiple(array(), array('type' => 'bill_testing'));
	$n = 0;
	while ($billnumber_nc <= $billend)  {
		$bill_nc = $billtype_nc . $billnumber_nc;
		$url_nc = $baseurl_nc . $billtype_nc . '/' . $billnumber_nc;
        $infomessage = 'Now importing ' . $url_nc . '.';
        drupal_set_message($infomessage,'status');
		$html_nc->load_file($url_nc);
		$longTitle_nc = $html_nc->find('div.ggah1');
		//Make sure that bill with prefix and number exists on GA leg. site by seeing if there is a long descrip
		if ($longTitle_nc != NULL) {
			$foundBill_nc = FALSE;
			//if bill exists, check bill short title against bill nodes' titles, if bill node exists, update full text and sponsors (keyword tagging happens via Rules but needs reset to NULL for that to take place), else if doesn't exist, create bill node
			foreach($loadedNodes_nc as $singleNode_nc) {
				if ($singleNode_nc->title == $bill_nc && $foundBill_nc != TRUE) {
					$cleanURL_nc = $singleNode_nc->field_linkfulltext[$singleNode_nc->language][0]['value'];
					if ($cleanURL_nc != NULL) {
					    $fullTextURL_nc = $html_nc->find('div.ScreenOnly div a');
                        //Clean up URL of PDF address to prepare for full text import 
                        $fullURL_nc = $fullTextURL_nc[0];
                        $endURL_nc = strpos($fullURL_nc, 'pdf"');
                        $URLpos_nc = $endURL_nc-6;
                        $cleanURL_nc1 = substr($fullURL_nc, 9, $URLpos_nc);
						$pdf_nc = galobby_watch_fulltext_importer($cleanURL_nc1, $a_nc, $billtype_nc, $billnumber_nc);
						$pdfCleaned_nc = $pdf_nc;
						$singleNode_nc->field_fulltext[$singleNode_nc->language][0]['format'] = 'full_html';
						$singleNode_nc->field_fulltext[$singleNode_nc->language][0]['value'] = $pdfCleaned_nc;
						//Clean up bill description for long title usage
						$billLen_nc = strlen($bill_nc)+2;
 						$billToDes_nc = $billLen_nc+53;
   						$shortBill_nc = substr($longTitle_nc[0], 49, $billLen_nc);
   						$billDes_nc = substr($longTitle_nc[0], $billToDes_nc, -6);
   						$billTitle_nc = $shortBill_nc . ' - ' . $billDes_nc;
						$singleNode_nc->field_billdescrip[$singleNode_nc->language][0]['value'] = $billTitle_nc;
						$singleNode_nc->field_linkfulltext[$singleNode_nc->language][0]['format'] = 'full_html';
						$singleNode_nc->field_linkfulltext[$singleNode_nc->language][0]['value'] = $cleanURL_nc1;
					}
					else {
						$fullTextURL_nc = $html_nc->find('div.ScreenOnly div a');
						//Clean up bill description for long title usage
						$billLen_nc = strlen($bill_nc)+2;
 						$billToDes_nc = $billLen_nc+53;
   						$shortBill_nc = substr($longTitle_nc[0], 49, $billLen_nc);
   						$billDes_nc = substr($longTitle_nc[0], $billToDes_nc, -6);
   						$billTitle_nc = $shortBill_nc . ' - ' . $billDes_nc;
						$singleNode_nc->field_billdescrip[$singleNode_nc->language][0]['value'] = $billTitle_nc;
						//Clean up URL of PDF address to prepare for full text import 
						$fullURL_nc = $fullTextURL_nc[0];
						$endURL_nc = strpos($fullURL_nc, 'pdf"');
						$URLpos_nc = $endURL_nc-6;
						$cleanURL_nc1 = substr($fullURL_nc, 9, $URLpos_nc);
						$pdf_nc1 = galobby_watch_fulltext_importer($cleanURL_nc1, $a_nc, $billtype_nc, $billnumber_nc);
						$pdfCleaned_nc1 = $pdf_nc1;
						$singleNode_nc->field_fulltext[$singleNode_nc->language][0]['format'] = 'full_html';
						$singleNode_nc->field_fulltext[$singleNode_nc->language][0]['value'] = $pdfCleaned_nc1;
						$singleNode_nc->field_linkfulltext[$singleNode_nc->language][0]['format'] = 'full_html';
						$singleNode_nc->field_linkfulltext[$singleNode_nc->language][0]['value'] = $cleanURL_nc1;
					}
					$singleNode_nc->field_keywords[$singleNode_nc->language] = NULL;
					$sponsors_nc = galobby_watch_find_item('<i>Sponsored By</i>', $html_nc);
					$committees_nc = galobby_watch_find_item('<i>Committees</i>', $html_nc);
					$summary_nc = galobby_watch_find_item('<i>First Reader Summary</i>', $html_nc);
					$status_nc1 = galobby_watch_find_item('<i>Status History</i>', $html_nc);
					$singleNode_nc->field_descrip[$singleNode_nc->language][0]['value'] = $summary_nc;
					$singleNode_nc->field_sponsor[$singleNode_nc->language][0]['value'] = $sponsors_nc;
					$singleNode_nc->field_committee[$singleNode_nc->language][0]['value'] = $committees_nc;
					$singleNode_nc->field_status[$singleNode_nc->language][0]['value'] = $status_nc1;
					//Added May 2015 - create uniform URL aliases for use with bills across the site
					if ($singleNode_nc->path['alias'] != 'bill/' . $bill_nc) {
						$singleNode_nc->path['alias'] = 'bill/' . $bill_nc;
					}
					//Check bill term, update if needed
					$tid = $singleNode_nc->field_billterms[$singleNode_nc->language][0]['tid'];
					if ($tid != NULL) {
						$fullTerm = taxonomy_term_load($tid);
						if ($fullTerm->name != $billTitle_nc) {
							galobby_watch_update_bill_term($billTitle_nc, $tid);
						}
					}
					node_save($singleNode_nc);
                   // field_cache_clear();
					$foundBill_nc = TRUE;
					set_time_limit(180);
				}	
			}
			if($foundBill_nc == FALSE)  {
				$fullTextURL_nc = $html_nc->find('div.ScreenOnly div a');
				//Clean up bill description for long title usage
				$billLen_nc = strlen($bill_nc)+2;
 				$billToDes_nc = $billLen_nc+53;
   				$shortBill_nc = substr($longTitle_nc[0], 49, $billLen_nc);
   				$billDes_nc = substr($longTitle_nc[0], $billToDes_nc, -6);
   				$billTitle_nc = $shortBill_nc . ' - ' . $billDes_nc;
				//Start to create new bill
				$billNode_nc = new stdClass();
				$billNode_nc->type = 'bill_testing';
				$billNode_nc->title = $bill_nc;
				$billNode_nc->language = LANGUAGE_NONE;
				$billNode_nc->comment = 2; //comments on
				$billNode_nc->field_billdescrip[$billNode_nc->language][0]['value'] = $billTitle_nc;
				$billNode_nc->field_billdescrip[$billNode_nc->language][0]['format'] = 'full_html';
				//Create bill term and tag bill with it
				$term_nc = galobby_watch_create_bill_term($billTitle_nc);
				$billNode_nc->field_billterms[$billNode_nc->language][0]['tid'] = $term_nc;
				//Clean up URL of PDF address to prepare for full text import 
				$fullURL_nc = $fullTextURL_nc[0];
				$endURL_nc = strpos($fullURL_nc, 'pdf"');
				$URLpos_nc = $endURL_nc-6;
				$cleanURL_nc1 = substr($fullURL_nc, 9, $URLpos_nc);
				$pdf_nc1 = galobby_watch_fulltext_importer($cleanURL_nc1, $a_nc, $billtype_nc, $billnumber_nc);
				$pdfCleaned_nc1 = $pdf_nc1;
				$billNode_nc->field_fulltext[$billNode_nc->language][0]['format'] = 'full_html';
				$billNode_nc->field_fulltext[$billNode_nc->language][0]['value'] = $pdfCleaned_nc1;
				$billNode_nc->field_linkfulltext[$billNode_nc->language][0]['format'] = 'full_html';
				$billNode_nc->field_linkfulltext[$billNode_nc->language][0]['value'] = $cleanURL_nc1;
				//Call data finding function for each piece of needed data
				$sponsors_nc = galobby_watch_find_item('<i>Sponsored By</i>', $html_nc);
				$committees_nc = galobby_watch_find_item('<i>Committees</i>', $html_nc);
				$summary_nc = galobby_watch_find_item('<i>First Reader Summary</i>', $html_nc);
				$status_nc1 = galobby_watch_find_item('<i>Status History</i>', $html_nc);
				$billNode_nc->field_descrip[$billNode_nc->language][0]['value'] = $summary_nc;
				$billNode_nc->field_descrip[$billNode_nc->language][0]['format'] = 'full_html';
				$billNode_nc->field_sponsor[$billNode_nc->language][0]['value'] = $sponsors_nc;
				$billNode_nc->field_sponsor[$billNode_nc->language][0]['format'] = 'full_html';
				$billNode_nc->field_status[$billNode_nc->language][0]['value'] = $status_nc1;
				$billNode_nc->field_status[$billNode_nc->language][0]['format'] = 'full_html';
				$billNode_nc->field_committee[$billNode_nc->language][0]['value'] = $committees_nc;
				$billNode_nc->field_committee[$billNode_nc->language][0]['format'] = 'full_html';
				//Added May 2015 - create uniform URL aliases for use with bills across the site
				$singleNode_nc->path['alias'] = 'bill/' . $bill_nc;
				node_save($billNode_nc);
                // field_cache_clear();
				set_time_limit(180);
			}
			$billnumber_nc++;
		}
		else {
			if($n > 1) {
				$billExists_nc = FALSE;
			}
			$n++;
			$billnumber_nc++;
            $infomessage = 'Warning - There was a problem importing ' . $bill_nc . ' from the state website.';
            drupal_set_message($infomessage,'warning');
		}
	}
	unset($html_nc);
	unset($a_nc);
	$message = "Completed Incremental Bill Import for " . $billtype_nc . $billstart . " => " . $billtype_nc . $billend;
	$type = "GA Lobby Cron";
	watchdog($type, $message, $variables = array(), $severity = WATCHDOG_NOTICE, $link = NULL);
}


function galobby_watch_menu() {
  $items = array();

  $items['billimporter'] = array( //this creates a URL that will call this form at "billimporter"
    'title' => 'Incremental Bill Importer Utility', //page title
    'description' => 'Imports Georgia Legislature bills on demand',
    'page callback' => 'drupal_get_form', //this is the function that will be called when the page is accessed.  for a form, use drupal_get_form
    'page arguments' => array('galobby_watch_form'), //put the name of the form here
    'access callback' => TRUE
  );

  return $items;
}

function galobby_watch_form($form, &$form_state) {

$hb = 'HB' . variable_get('galobby_last_hb');
$hb = "<a href='http://galobby.com/bill/$hb'>$hb</a>";
$hr = 'HR' . variable_get('galobby_last_hr');
$hr = "<a href='http://galobby.com/bill/$hr'>$hr</a>";
$sb = 'SB' . variable_get('galobby_last_sb');
$sb = "<a href='http://galobby.com/bill/$sb'>$sb</a>";
$sr = 'SR' . variable_get('galobby_last_sr');
$sr = "<a href='http://galobby.com/bill/$sr'>$sr</a>";
$billcount = "<p>Bill endpoints from last night: $hb, $hr, $sb, $sr</p>";
  
 $form['description'] = array(
  '#markup' => '<p>This utility imports Georgia Legislature bills on demand for pre-files and out-of-sequence bills.</p>'
);

 $form['billcounters'] = array(
  '#markup' => $billcount
);
 
 $form['type_options'] = array(
  '#type' => 'value',
  '#value' => array('HB' => t('HB'),
                    'HR' => t('HR'),
                    'SB' => t('SB'),
                    'SR' => t('SR')
));

$form['type'] = array(
  '#title' => t('Bill Type'),
  '#type' => 'select',
  '#description' => "Select the bill type.",
  '#options' => $form['type_options']['#value'],
  '#required' => TRUE, //make this field required 
);  
  
 $form['billstartnum'] = array(
    '#type' => 'textfield', //you can find a list of available types in the form api
    '#title' => 'What is the starting bill number?',
    '#size' => 4,
    '#maxlength' => 4,
    '#required' => TRUE, //make this field required 
  );
  
   $form['billendnum'] = array(
    '#type' => 'textfield', //you can find a list of available types in the form api
    '#title' => 'What is the ending bill number?',
    '#size' => 4,
    '#maxlength' => 4,
    '#required' => TRUE, //make this field required 
  );

  $form['submit_button'] = array(
    '#type' => 'submit',
    '#value' => t('Click Here!'),
  );
  
  return $form;
}

function galobby_watch_form_validate($form, &$form_state) {
  if (!($form_state['values']['billstartnum'] > 0)){
    form_set_error('billstartnum', t('Bill starting number must be a positive number.'));
  }
  if (!($form_state['values']['billendnum'] > 0)){
    form_set_error('billendnum', t('Bill ending number must be a positive number.'));
  }
  elseif ($form_state['values']['billendnum'] < $form_state['values']['billstartnum']){
    form_set_error('billendnum', t('Bill ending number must greater than or equal to starting number.'));
  }
}

function galobby_watch_form_submit($form, &$form_state) {
  $billtype = $form_state['values']['type'];
  $billstart = $form_state['values']['billstartnum'];
  $billend = $form_state['values']['billendnum'];
  $infomessage = 'IMPORTANT - This is a FUNCTIONAL test of the processor and DOES currently import bills.';
  drupal_set_message($infomessage,'warning');
  $infomessage = 'BILL IMPORTER (BEGIN) - ' . $billtype . $billstart . ' => ' . $billtype . $billend . '.';
  drupal_set_message($infomessage,'warning');
  galobby_watch_incremental_updater($billtype, $billstart, $billend);
  $infomessage = 'BILL IMPORTER (END) - ' . $billtype . $billstart . ' => ' . $billtype . $billend . '.';
  drupal_set_message($infomessage,'warning');
}

/** 
Added to put full bill URL on bill display page without storing in database JD 2016-Jan-18 
**/

function galobby_watch_node_view($node, $view_mode, $langcode) {  
  if ($node->type == 'bill_testing' && $view_mode == 'full') 
  {
    $bill_state_url = "<b>State Summary URL:</b><br />";
    $billtitle = $node->title;
    $billtype = substr($billtitle, 0, 2);
    $billnumber = substr($billtitle, 2);
    $bill_state_url_link = "<p><a href='http://www.legis.ga.gov/legislation/en-US/Display/20152016/$billtype/$billnumber'>http://www.legis.ga.gov/legislation/en-US/Display/20152016/$billtype/$billnumber</a></p>";
    $node->content['bill_state_url_field'] = array(
    '#theme' => 'field',
    '#weight' => 6,
    '#title' => 'State Bill Summary',
    '#access' => TRUE,
    '#label_display' => 'above',
    '#view_mode' => 'full',
    '#language' => 'und',
    '#field_name' => 'field_bill_state_url_field',
    '#field_type' => 'text',
    '#field_translatable' => '0',
    '#entity_type' => 'node',
    '#bundle' => 'bill_testing',
    '#object' => 'stdClass',
    '#items' => array( array(
      '#value' => $bill_state_url,
      '#format' => 'full_html',
      '#safe_value' => $bill_state_url_link,
      )),
    '#formatter' => 'text_default',
    array(
     '#markup' => $bill_state_url_link )
      
      ); 
  }
}

/** 
Added to modify search results for bills to add in the bill title - Joe 2/12/16
**/

function galobby_watch_preprocess_search_result(&$vars) {
  $node = $vars['result']['node'];
  if ( ($node->nid) && ($node->type == 'bill_testing') ) {
    $vars['type'] = "bill_testing";
    $vars['descrip'] = $node->field_billdescrip[$node->language][0]['value'];
  }
}

/**
 * hide_submit should only be on simplified notice screen... Lindsey 03/10/2016
 */
function galobby_watch_hide_submit_alter(&$hide_submit_settings) {
  $current_path = current_path();
  if (!($current_path === 'node/add/old-notice')) {
    $hide_submit_settings['hide_submit']['hide_submit_status'] = FALSE;
  }
}