<?php

/**
 * @file
 * Subscriptions Content module (admin functions).
 */


/**
 * Implements hook_form_alter().
 *
 * Adds the Taxonomy Settings part to SUBSCRIPTIONS_CONFIG_PATH.
 *
 * @param array $form
 * @param array $form_state
 *
 * @ingroup hooks
 * @ingroup form
 */
function _subscriptions_taxonomy_form_subscriptions_settings_form_alter(array &$form, array &$form_state) {
  $tr = 't';

  $form['taxonomy'] = array(
    '#type' => 'fieldset',
    '#title' => t('Taxonomy settings'),
    '#collapsible' => TRUE,
    '#weight' => -8,
  );

  $vocabularies = taxonomy_get_vocabularies();
  $select[0] = '<' . t('none') . '>';
  foreach ($vocabularies as $vocabulary) {
    $select[$vocabulary->vid] = check_plain($vocabulary->name);
  }

  $form['taxonomy']['subscriptions_restricted_taxa'] = array(
    '#type'          => 'select',
    '#title'         => t('Restricted vocabularies'),
    '#default_value' => variable_get('subscriptions_restricted_taxa', array()),
    '#options'       => $select,
    '#description'   => t('Select vocabularies for which only the subscribed terms should be listed on the %Subscriptions | %Categories page.<br />This helps to reduce the size of the listing, especially for free-tagging vocabularies with large numbers of terms.', array('%Subscriptions' => t('Subscriptions'), '%Categories' => $tr('Categories'))),
    '#multiple'      => TRUE,
  );
  $form['taxonomy']['subscriptions_omitted_taxa'] = array(
    '#type'          => 'select',
    '#title'         => t('Omitted vocabularies'),
    '#default_value' => variable_get('subscriptions_omitted_taxa', array()),
    '#options'       => $select,
    '#description'   => t('Select vocabularies which should be <strong>omitted</strong> from subscriptions listings; this means the terms of those vocabularies will be unlisted, i.e. they will be removed from subscription listings.<br />The content may still be available for subscribing via different kinds of subscriptions, but subscribing by category will be unavailable for the terms in the selected vocabularies.'),
    '#multiple'      => TRUE,
  );

}

/* Function to sort arrays naturally instead of alphabetically for bill watch form */
function comp($a, $b)  {
	return strnatcmp($a->name, $b->name);
}

/* Adjusted function to sort arrays naturally for Bill Watch (JD - 1/7/16) */
function comparray($a, $b)  {
	return strnatcmp($a["name"], $b["name"]);
}

/**
 * Build the Categories subscription form at user/UID/subscriptions/taxa.
 *
 * @param array $form
 * @param int $uid
 * @param array $vocabularies
 *   ID of a user if >0 or of a role if <0.
 *
 * @return array
 *
 * @ingroup form
 */
function _subscriptions_taxonomy_taxa_form(array $form, $uid, array $vocabularies) {
	//dpm('form');
	//dpm($form);
  $query = db_select('taxonomy_term_data', 't', array('fetch' => PDO::FETCH_ASSOC));
  $query->join('subscriptions', 's', (db_driver() != 'pgsql' ? 't.tid = s.value' : 'CAST(t.tid AS VARCHAR) = s.value'));
  $result = $query
    ->fields('s', array('value', 'send_interval', 'author_uid', 'send_comments', 'send_updates'))
    ->fields('t', array('tid', 'vid', 'name'))
    ->condition('s.module', 'node')
    ->condition('s.field', 'tid')
    ->condition('s.recipient_uid', $uid)
    ->addTag('taxonomy_access')
    ->orderBy('s.author_uid')
    ->execute();
  foreach ($result as $s) {
    $subscriptions[$s['vid']][$s['value']][$s['author_uid']] = $s;
    $subscriptions_terms_by_vid[$s['vid']][$s['value']] = $s;
  }
	
  foreach ($vocabularies as $vocab) {
    // display vocabulary name and group terms together
    $form[$vocab->vid] = array(
      '#type' => 'fieldset',
      '#title' => check_plain($vocab->name),
      '#collapsible' => TRUE,
	  '#collapsed' => TRUE,
    );
    $form[$vocab->vid][0] = array(
      '#tree' => TRUE,
      '#theme' => 'subscriptions_form_table',
    );
    $subscriptions_vid = (isset($subscriptions[$vocab->vid]) ? $subscriptions[$vocab->vid] : NULL);
    $vids_to_restrict = variable_get('subscriptions_restricted_taxa', array());
    $tree = NULL;
    
	//Javascript to control select/deselect is in /themes/freedom/templates/html.tpl.php
    if (!in_array($vocab->vid, $vids_to_restrict)) {
		if($vocab->vid == 5) {
        	$form[$vocab->vid][-1] = array(
         	 '#type' => 'item',
         	 '#description' => '<div>' . t('<a id="check-all-bw" href="javascript:void();">Click here</a> to select/deselect all Board Watch committees.') . '</div>',
			'#weight' => -10,
       	 );
			$tree = taxonomy_get_tree($vocab->vid);
      	}

		if($vocab->vid == 6) {
		//dpm('Vid is 6 - reached');
       	 $form[$vocab->vid][-1] = array(
         	 '#type' => 'item',
          	'#description' => '<div>' . t('<a id="check-all-gw" href="javascript:void();">Click here</a> to select/deselect all Government Watch departments.') . '</div>',
			'#weight' => -10,
       		);
			$tree = taxonomy_get_tree($vocab->vid);
      }
		// Edit Jan 24th, 2015 for GLOB: if bill term tree, use nat. sorting, otherwise, continue
		//
		// Nov 17 2017 - now unused because bill watch and code watch vocabularies are restricted!
		if($vocab->vid == 7) {
			//dpm('Vid is 7 - reached');
			$form[$vocab->vid][-1] = array(
         	 '#type' => 'item',
         	 '#description' => '<div>' . t('<a id="check-all-billw" href="javascript:void();">Click here</a> to select/deselect all Bill Watch bills.') . '</div>',
			'#weight' => -10,
       	 );
      		$tree = taxonomy_get_tree($vocab->vid);
            drupal_set_message(t('Full bill term listing'), 'warning');
			usort($tree, "comp");
		}
		
		if($vocab->vid == '8') {
       	 $form[$vocab->vid][-1] = array(
         	 '#type' => 'item',
          	'#description' => '<div>' . t('<a id="check-all-codew" href="javascript:void();">Click here</a> to select/deselect all Code Watch keywords.') . '</div>',
			'#weight' => -10,
       		);
			$tree = taxonomy_get_tree($vocab->vid);
      }
		
		else {
			$tree = taxonomy_get_tree($vocab->vid);
		}
    }
    else {
      if (isset($subscriptions_terms_by_vid[$vocab->vid])) {
        $tree = $subscriptions_terms_by_vid[$vocab->vid];
                            
        // Added to sort bill terms naturally Dec 16, 2015 - Modified 1/7/16
        if($vocab->vid == 7) {
			//dpm('Vid is 7 - reached');
			$form[$vocab->vid][-1] = array(
         	 '#type' => 'item',
         	 '#description' => '<div>' . t('<a id="check-all-billw" href="javascript:void();">Click here</a> to select/deselect all Bill Watch bills.') . '</div>',
			'#weight' => -10,
       	 );
			usort($tree, "comparray");
		 }
	   // End of bill term natural sort      


		if($vocab->vid == 8) {
        	$form[$vocab->vid][-1] = array(
         	 '#type' => 'item',
          	'#description' => '<div>' . t('<a id="check-all-codew" href="javascript:void();">Click here</a> to select/deselect all Code Watch keywords.') . '</div>',
			'#weight' => -10,
       		);

			usort($tree, "comparray");

			$form[$vocab->vid][1] = array(
          '#type' => 'item',
          '#description' => '<div>' . t('To add a word or phrase to Code Watch, you can go to "Quick Add New Keyword" on the left menu and click there or <a href="https://galobby.com/admin/structure/taxonomy/keywords/add">click here</a>.  Then add words.') . '</div>',
        );
      }
		else {
        $form[$vocab->vid][1] = array(
          '#type' => 'item',
          '#description' => '<div>' . t('<b><i>NEW!</i></b> To follow bills in Bill Watch, add bills using the bill type and bill number in the format of "HB100" or "SR10" separated by commas in the box below and press enter or click SAVE at the bottom of this page.') . '</div>',
        );
      }
	 }
    }
    $forum_containers = NULL;
    if (module_exists('forum') && $vocab->vid == variable_get('forum_nav_vocabulary', '')) {
      $forum_containers = variable_get('forum_containers', array());
    }
    $defaults = array();
    
    if (isset($tree)) {
    foreach ($tree as $term) {
        if (is_array($term)) {
          $term = (object) $term;
        }
        $depth = (empty($term->depth) ? 0 : $term->depth);
        // If BW, then create a link to the actual bill node, not the taxonomy term references.
        if($vocab->vid == 7) {
         $bill = $term->name;
         preg_match('/([hHsS][bBrR])/', $bill, $billType);
         preg_match('/(\d+)/', $bill, $billNum);
         $billtype = strtolower($billType[0]);
         $billnumber = $billNum[0];
         $bill = $billtype . $billnumber;
         $title = '<span class="indenter">' . str_repeat('--&nbsp;', $depth) . '</span>' .
         //l($term->name, 'bill/' . $bill, array('attributes' => array('class' => 'depth-' . $depth)));
			t('<a target="_blank" href="http://www.legis.ga.gov/legislation/en-US/Display/20172018/@bt/@bn">@bname</a><br /> (<a target="_blank" href="http://legislativenavigator.myajc.com/#bills/@bt/@bn">Related news stories</a>)', array(
  				'@bt' => $billtype,
				'@bn' => $billnumber,
				'@bname' => $term->name,
			));
		}
         else {
          $title = '<span class="indenter">' . str_repeat('--&nbsp;', $depth) . '</span>' .
          l($term->name, 'taxonomy/term/' . $term->tid, array('attributes' => array('class' => 'depth-' . $depth)));
        }
        if (!isset($subscriptions_vid[$term->tid][-1])) {
          // author-less item is missing -- add it here:
          $subscriptions_vid[$term->tid][-1] = array(
            'send_interval' => _subscriptions_get_setting('send_interval', $uid),
            'send_comments' => _subscriptions_get_setting('send_comments', $uid),
            'send_updates' => _subscriptions_get_setting('send_updates', $uid),
            'author_uid' => FALSE,
          );
        }
		
        // add the active subscriptions
        foreach ($subscriptions_vid[$term->tid] as $author_uid => $subscription) {
          // TODO: support multi-parent hierarchies (currently, the child is not repeated)
          subscriptions_form_helper($form[$vocab->vid][0], $defaults, $author_uid, $term->tid, $title, $subscription);
          if (isset($forum_containers) && in_array($term->tid, $forum_containers)) {
			$tids = array_keys($form[$vocab->vid][0]['checkboxes']);
            $tid = end($tids);
            $form[$vocab->vid][0]['checkboxes'][$tid][-1]['#disabled'] = TRUE;
          }
        }
      }
    }
    else {
      $form[$vocab->vid]['info']['#value'] = '<p>' . t('This is a restricted category group; only subscribed categories show up in this list.<br />To subscribe to a category in this group, go to a post in that category and subscribe from there.') . '</p>';
    }
    $form[$vocab->vid][0]['defaults'] = array(
      '#type' => 'value',
      '#value' => $defaults,
    );
    subscriptions_form_column_filter($form[$vocab->vid][0], $uid);
  }

	//dpm($form);
  return $form;
}
