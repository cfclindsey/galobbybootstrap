<?php

/**
 *  This module will handle creation of new UX for Client Watch Reporting including creation of landing pages, tables, new functionality,
 *	and PDF exports.
 *	New module as of May 2017.
 * 	
 *
 *  IMPORTANT NOTE!!! There are "duplicate" copies of code that are very similar to create PDFs.  If you make changes to code, 
 * 	make sure to get all copies of code via find/replace!!!
 */

set_include_path(get_include_path() . PATH_SEPARATOR . "sites/all/libraries/dompdf");
set_include_path(get_include_path() . PATH_SEPARATOR . "sites/all/libraries/PHPMailer");

require_once 'dompdf_config.inc.php';
require_once 'sites/all/libraries/PHPMailer/PHPMailerAutoload.php';

//Create menu items and register with system
function galobby_cw_menu() {
  $items = array();

  $items['cw-landing'] = array( //this creates a URL that will call this page at "cw-landing"
    'title' => 'Client Watch Reports', //page title
    'description' => 'Landing page for Client Watch Reports',
    'page callback' => 'galobby_cw_bill_table_page',     
  	'access arguments' => array('access content'),
    'access callback' => TRUE
  );

	$items['cw-clients/%'] = array( //this creates a URL that will call this form at "cw-clients"
    'title' => 'Client Watch Reports by Client/Issue', //page title
    'description' => 'Client Watch Reports by Client/Issue',
	'page callback' => 'drupal_get_form',
	'page arguments' => array('galobby_cw_ind_client_table_form', 1),   
  	'access arguments' => array('access content'),
    'access callback' => TRUE
  );

	$items['cw-clients/%/bill-sort'] = array( //this creates a URL that will call this form at "cw-clients"
    'title' => 'Client Watch Reports by Client/Issue', //page title
    'description' => 'Client Watch Reports by Client/Issue',
	'page callback' => 'drupal_get_form',
	'page arguments' => array('galobby_cw_ind_client_table_form_sorted', 1),   
  	'access arguments' => array('access content'),
    'access callback' => TRUE
  );

	$items['cw-add-bill/%'] = array( //this creates a URL that will call this form at "cw-add-bill"
    'title' => 'Add Bill to Client/Issue', //page title
    'description' => 'Add Bill to by Client/Issue',
	'page callback' => 'drupal_get_form',
	'page arguments' => array('galobby_cw_add_bill_form', 1),   
  	'access arguments' => array('access content'),
    'access callback' => TRUE
  );

	$items['cw-send-email/%'] = array( //this creates a URL that will call this form at "cw-send-email"
    'title' => 'Send PDF by Email', //page title
    'description' => 'Send PDF by Email',
	'page callback' => 'drupal_get_form',
	'page arguments' => array('galobby_cw_send_pdf_form', 1),   
  	'access arguments' => array('access content'),
    'access callback' => TRUE
  );

  return $items;
}

//create CW landing page
function galobby_cw_bill_table_page() {
	global $user;
	$usobj = user_load($user->uid);
	$userid = $user->uid;
	//make sure user has permission to see Client Watch
	if (user_has_role(10, $usobj) || user_has_role(3, $usobj) || user_has_role(13, $usobj)) {
		//begin to build HTML for page starting with menu links and static content at top of page
		$menuhtml = '<div class="block block-menu contextual-links-region" id="block-menu-menu-left-menu-client-watch-la" style="display:none;">
<h2>Client Watch Quick Menu</h2></div>
<div class="content">
<ul class="menu">
	<li class="first leaf"><a href="/development/node/add/client-watch" title="">Quick Add Bill for Client Watch</a></li>
	<li class="leaf"><a href="/development/admin/structure/taxonomy/clients/add" title="">Add New Client or Issue</a></li>
	<li class="last leaf"><a href="/development/cw-team-edit">Client Watch Team Collaboration</a></li>
	<li class="last leaf"><a href="/development/user/' . $userid . '/edit" title="">Edit your Profile</a></li>
	<li class="last leaf"><a href="/development/user/logout" title="">Logout</a></li>
</ul>
</div></div></div>';
		
		//bill table html
		$billhtml = '<div id="cw-all-bills" class="view-id-client_watch_reporting"><h3>All Client Watch Bills</h3><table id="cw-bill-table" class="tablesorter"><thead><tr><th>Importance</th><th>Bill</th><th> Description</th><th>Summary</th><th>Sponsor</th><th>Committees</th><th>Status</th><th>Analysis</th><th>Client/Issue</th><th>Edit</th><th>Delete</th></tr></thead><tbody>';
		
		$userTerms = array();
		//let's load user's client watch bills...
		$query = new EntityFieldQuery();
		$entities = $query->entityCondition('entity_type', 'node')
					->propertyCondition('type', 'client_watch')
					->propertyCondition('uid', $userid)
					->execute();
		if (!empty($entities['node'])) {
  			$cwNodes = array_keys($entities['node']);
			$cwBills = entity_load('node', $cwNodes);
			foreach ($cwBills as $cw) {
				//get and assign all fields to a variable
				$title = $cw->title;
				preg_match('/(\d+)/', $title, $billNum3);
                $billtype3 = substr($title, 0, 2);
    			$billnumber3 = $billNum3[0];
				$baseurl3 = 'http://www.legis.ga.gov/legislation/en-US/Display/20172018/';
    			$url3 = $baseurl3 . $billtype3 . '/' . $billnumber3;
				$title_sort = $billtype3 . ' ' . $billnumber3;
				$importance = $cw->field_importance[$cw->language][0]['value'];
				$descrip = $cw->field_billdescrip[$cw->language][0]['value'];
				$summary = $cw->field_descrip[$cw->language][0]['value'];
				$sponsor = $cw->field_sponsor[$cw->language][0]['value'];
				$committee = $cw->field_committee[$cw->language][0]['safe_value'];
				$status = $cw->field_status[$cw->language][0]['value'];
				$analysis = $cw->body[$cw->language][0]['safe_value'];
				$cterms = '';
				$c = 0;
				$terms = array();
				//get terms to prepare for report links
				foreach ($cw->field_clients[$cw->language] as $t) {
					//$userTerms[] = $t['tid'];
					$term = entity_load_single('taxonomy_term', $t['tid']);
					$userTerms[] = $term->name;
					$terms[] = $term->name;
					$c++;
				}
				//dpm($terms);
				//$terms = array_unique($terms);
				foreach ($terms as $ter) {
					$cterms .= $ter;
					if ($c - 1 > 0) {
						$cterms .= ', ';
					}
					$c--;
				}
				$c = 0;
				//build bill HTML lines
				$billhtml .= '<tr><td class="views-field-field-importance">' . $importance . '</td><td><a href="' . $url3 . '">' . /*$cw->title*/ $title_sort . '</a></td><td>' . $descrip . '</td><td class="views-field-field-descrip">' . $summary . '</td><td>' . $sponsor . '</td><td>' . $committee . '</td><td>' . strip_tags($status) . '</td><td>' . $analysis . '</td><td>' . $cterms . '</td><td><a href="/development/node/' . $cw->nid . '/edit">Edit</a></td><td><a href="/development/node/' . $cw->nid . '/delete">Delete</a></td></tr>';
			}
		}
		//remove dups in terms array
		$userTerms = array_unique($userTerms);
		//dpm($userTerms);
		//dpm($terms);
		//$terms = array_unique($terms);
		//dpm($terms);
		//start listings html
		$termslistinghtml = '<div id="reports-by-term"><h3>Client Watch Reports by Client/Issue</h3><span>*NOTE: You must add a bill to a client/issue before it will show up in this list. Clients/issues without bills will not be shown.</span><ul>';
		//load each term to get the name and set up for the correct URL
		foreach ($userTerms as $te) {
			/*$query = new EntityFieldQuery();
			$entities = $query->entityCondition('entity_type', 'taxonomy_term')
					->entityCondition('bundle', array('clients'))
					->propertyCondition('tid', $te)
					->execute();
			if (!empty($entities['taxonomy_term'])) {
  				$cwTerms = array_keys($entities['taxonomy_term']);
				$cwClients = entity_load('taxonomy_term', $cwTerms);
				foreach ($cwClients as $cli) {*/
					
					//$termslistinghtml .=  '<li><a href="/development/cw-clients/' . $cli->name .'">' . $cli->name . '</a></li>';
				/*}
			}*/
			$termslistinghtml .=  '<li><a href="/development/cw-clients/' . $te .'">' . $te . '</a></li>';
		}
		unset($userTerms);
		unset($terms);
		//concat html into singular html item to return.
		$html = $menuhtml . $termslistinghtml . '</ul> </div>' . $billhtml . '</tbody></table></div>';
	}
	else {
		//no permissions message
		$html = 'You are not subscribed to Client Watch services.  Please contact Georgia Lobby if you feel this is an error or to upgrade your contract to include this valuable service!';
	}
	return $html;
}

//create CW individual term page
function galobby_cw_ind_client_table_form($form, &$form_state, $argument) {
	//Importance sort:
	$diff = "importance";
	$form = galobby_cw_page_layout($form, $form_state, $argument, $diff);
	return $form;
}

//create CW individual term page sorted by bill title
function galobby_cw_ind_client_table_form_sorted($form, &$form_state, $argument) {
	//Bill sort:
	$diff = "bill";
	$form = galobby_cw_page_layout($form, $form_state, $argument, $diff);
	return $form;
}


//functions control the user selected report outcomes on submit from the importance and bill sorted forms
function galobby_cw_ind_client_table_form_submit($form, &$form_state) {
	galobby_cw_submit_multi($form, $form_state);
}

function galobby_cw_ind_client_table_form_sorted_submit($form, &$form_state) {
	galobby_cw_submit_multi($form, $form_state);
}

//quick add client watch bill with specific client/issue term
function galobby_cw_add_bill_form($form, &$form_state, $argument) {
	global $user;
	$usobj = user_load($user->uid);
	$userid = $user->uid;
	$client = $form_state['build_info']['args'][0];
	
	//make sure user has permission to see Client Watch
	if (user_has_role(10, $usobj) || user_has_role(3, $usobj) || user_has_role(13, $usobj)) {
		$form['description'] = array(
  			'#markup' => '<p>Quickly add a bill to Client Watch Reporting for ' . $client . '.</p>'
		);
 
		$form['type_options'] = array(
  			'#type' => 'value',
  			'#value' => array('HB' => t('HB'),
                    'HR' => t('HR'),
                    'SB' => t('SB'),
                    'SR' => t('SR')
		));

		$form['type'] = array(
  			'#title' => t('Bill Type'),
  			'#type' => 'select',
  			'#description' => "Select the bill type.",
  			'#options' => $form['type_options']['#value'],
  			'#required' => TRUE, //make this field required 
		);  
  
 		$form['billstartnum'] = array(
    		'#type' => 'textfield', //you can find a list of available types in the form api
    		'#title' => 'Enter the bill number.',
    		'#size' => 4,
    		'#maxlength' => 4,
    		'#required' => TRUE, //make this field required 
  		);
  
		$form['analysis'] = array(
    		'#type' => 'textarea',
    		'#title' => 'Add your analysis for the bill.',
    		'#cols' => 64,
    		'#rows' => 10,
			'#resizable' => TRUE,
    		'#required' => FALSE, 
  		);

		$form['imp_options'] = array(
  			'#type' => 'value',
  			'#value' => array(' ' => t('N/A'),
					'1-Highest' => t('1-Highest'),
                    '2-High' => t('2-High'),
                    '3-Medium' => t('3-Medium'),
                    '4-Low' => t('4-Low'),
					'5-Lowest' => t('5-Lowest'),
		));

		$form['imp'] = array(
  			'#title' => t('Importance'),
  			'#type' => 'select',
  			'#description' => "Select importance level of bill.",
  			'#options' => $form['imp_options']['#value'],
  			'#required' => FALSE, 
		);

  		$form['submit_button'] = array(
    		'#type' => 'submit',
    		'#value' => t('Create Bill'),
  		);
	}
	
	else {
		//no permissions message
		$html = 'You are not subscribed to Client Watch services.  Please contact Georgia Lobby if you feel this is an error or to upgrade your contract to include this valuable service!';
		
		return $html;
	}
	return $form;
}

function galobby_cw_add_bill_form_submit($form, &$form_state) {
	//create CW bill programmatically
	global $user;
	$billtype = $form_state['values']['type'];
	$billnum = $form_state['values']['billstartnum'];
	$billtitle = $billtype . $billnum;
	//load bill and copy contents
	$queryCW = new EntityFieldQuery();
	$entitiesCW = $queryCW->entityCondition('entity_type', 'node')
				->propertyCondition('type', 'bill_testing')
				->propertyCondition('title', $billtitle)
				->execute();
			if (!empty($entitiesCW['node'])) {
				foreach($entitiesCW['node'] as $ent) {
					$cl_term = taxonomy_get_term_by_name($form_state['build_info']['args'][0], 'clients');
					foreach($cl_term as $cl_t) {
						$cl_tid = $cl_t->tid;
					}
				$bill = node_load($ent->nid);
				$cwbill = new stdClass();
				$cwbill->type = 'client_watch';
				$cwbill->title = $billtype . $billnum;
				$cwbill->language = LANGUAGE_NONE;
				$cwbill->uid = $user->uid;
				$cwbill->field_billdescrip[$cwbill->language][0]['value'] = $bill->field_billdescrip[$bill->language][0]['value'];
				$cwbill->field_billdescrip[$cwbill->language][0]['format'] = 'full_html';
				$cwbill->field_linkfulltext[$cwbill->language][0]['format'] = 'full_html';
				$cwbill->field_linkfulltext[$cwbill->language][0]['value'] = $bill->field_linkfulltext[$bill->language][0]['value'];
				$cwbill->field_descrip[$cwbill->language][0]['value'] = $bill->field_descrip[$bill->language][0]['value'];
				$cwbill->field_descrip[$cwbill->language][0]['format'] = 'full_html';
				$cwbill->field_sponsor[$cwbill->language][0]['value'] = $bill->field_sponsor[$bill->language][0]['value'];
				$cwbill->field_sponsor[$cwbill->language][0]['format'] = 'filtered_html';
				$cwbill->field_status[$cwbill->language][0]['value'] = $bill->field_status[$bill->language][0]['value'];
				$cwbill->field_status[$cwbill->language][0]['format'] = 'full_html';
				$cwbill->field_committee[$cwbill->language][0]['value'] = $bill->field_committee[$bill->language][0]['value'];
				$cwbill->field_committee[$cwbill->language][0]['format'] = 'filtered_html';
				$cwbill->field_bill_type[$cwbill->language][0]['value'] = $billtype;
				$cwbill->field_bill_number[$cwbill->language][0]['value'] = $billnum;
				$cwbill->body[$cwbill->language][0]['value'] = $form_state['values']['analysis'];
				$cwbill->body[$cwbill->language][0]['format'] = 'filtered_html';
				$cwbill->field_clients[$cwbill->language][0]['tid'] = $cl_tid;
				$cwbill->field_importance[$cwbill->language][0]['value'] = $form_state['values']['imp'];
				node_save($cwbill);
				
				$path = '/cw-clients/' . $cl_t->name . '/';
				$form_state['redirect'] = $path;
				$infomessage = 'Bill ' . $cwbill->title . ' has been added.';
  				
				}
			}
			else {
				$infomessage = 'The bill you entered may not exist.  Please check the bill number and try again.';
			}
			drupal_set_message($infomessage,'status');
}

function galobby_cw_send_pdf_form($form, &$form_state, $argument) {
	
	$pdf_name = $form_state['build_info']['args'][0];
	
	//make sure user has permission to see Client Watch
	if (user_has_role(10, $usobj) || user_has_role(3, $usobj) || user_has_role(13, $usobj)) {
		$form['description'] = array(
  			'#markup' => '<p>Send Report via email.</p>'
		);
 
		$form['from'] = array(
  			'#type' => 'textfield',
			'#title' => "Send email from (address):",
  			'#size' => 60,
			'#maxlength' => 128,
			'#required' => TRUE, //make this field required 
		);
		
		$form['from_name'] = array(
  			'#type' => 'textfield',
			'#title' => "Send email from (name):",
  			'#size' => 60,
			'#maxlength' => 128,
			'#required' => TRUE, //make this field required 
		);

		$form['to'] = array(
  			'#type' => 'textfield',
  			'#title' => "Send email to:",
			'#size' => 60,
			'#maxlength' => 128,
  			'#required' => TRUE, //make this field required 
		);  
  
 		$form['subject'] = array(
    		'#type' => 'textfield', //you can find a list of available types in the form api
    		'#title' => "Email subject line:",
			'#size' => 60,
			'#maxlength' => 128,
    		'#required' => TRUE, //make this field required 
  		);
  
		$form['body'] = array(
    		'#type' => 'textarea',
    		'#title' => 'Body of message:',
    		'#cols' => 64,
    		'#rows' => 10,
			'#resizable' => TRUE,
    		'#required' => FALSE, 
  		);

		$form['pdf_name'] = array(
  			'#type' => 'text',
  			'#value' => 'http://new.galobby.com/development/sites/default/files/pdf-reports/' . $pdf_name . '.pdf',
		);

  		$form['submit_button'] = array(
    		'#type' => 'submit',
    		'#value' => t('Send Email'),
  		);
		return $form;
	}
	
}

function galobby_cw_send_pdf_form_validate($form, &$form_state) {

	//check that email is actually an email address
	$mail = $form_state['values']['from'];
	if (!valid_email_address($mail)) {
  		form_set_error('[from]', t('This email address appears to be invalid.'));
	}
	$mail2 = $form_state['values']['to'];
	if (!valid_email_address($mail2)) {
  		form_set_error('[to]', t('This email address appears to be invalid.'));
	}
}

function galobby_cw_send_pdf_form_submit($form, &$form_state) {
	
	$mail = new PHPMailer;
	
	$message = $form_state['values']['from_name'] . ' has sent you a Client Watch report.  Click on the following link to view or download the PDF report. <a href="' . $form_state['complete form']['pdf_name']['#value'] . '"> ' .$form_state['complete form']['pdf_name']['#value'] . '</a><br /><br /> ' . $form_state['values']['body'];
		
	$mail->From = $form_state['values']['from'];
	$mail->FromName = $form_state['values']['from_name'];
		
	$mail->addAddress($form_state['values']['to']);
	$mail->addAttachment($form_state['complete form']['pdf_name']['#value']);
		
	$mail->isHTML(true);
	$mail->Subject = $form_state['values']['subject'];
	$mail->Body = $message;
	$mail->AltBody = "This is the PHPMailer plain text version of the email content";
		
	if (!$mail->send()) {
		$msg = "Mailer error: " . $mail->ErrorInfo;
	}
	else {
		$msg = 'Message sent!';
	}
	drupal_set_message($msg, 'status');
}

//build out ind client/issue term tables
function galobby_cw_page_layout($form, &$form_state, $argument, $diff) {
	dpm($form_state);
	global $user;
	$usobj = user_load($user->uid);
	$userid = $user->uid;
	$client = $form_state['build_info']['args'][0];
	//make sure user has permission to see Client Watch
	if (user_has_role(10, $usobj) || user_has_role(3, $usobj) || user_has_role(13, $usobj)) {
		$n = 0; 
		$cl_term = taxonomy_get_term_by_name($client, 'clients');
		foreach($cl_term as $cl_t) {
			$cl_tid = $cl_t->tid;
		}
		//begin to build HTML for page starting with menu links and static content at top of page
		$menuhtml = '<div class="block block-menu contextual-links-region" id="block-menu-menu-left-menu-client-watch-la" style="display:none;">
<h2>Client Watch Quick Menu</h2></div>
<div class="content">
<ul class="menu">
	
	<li class="first leaf"><a href="/development/cw-add-bill/' . $client . '" title="">Add Bill for this Client/Issue</a></li>
	<li class="first leaf"><a href="/development/cw-landing" title="">Return to all Bills View</a></li>
	<li class="leaf"><a href="/development/admin/structure/taxonomy/clients/add" title="">Add New Client or Issue</a></li>
	<li class="last leaf"><a href="/development/cw-team-edit">Client Watch Team Collaboration</a></li>
	<li class="last leaf"><a href="/development/user/' . $userid . '/edit" title="">Edit your Profile</a></li>
	<li class="last leaf"><a href="/development/user/logout" title="">Logout</a></li>
</ul>
</div></div></div>';
		//<li class="first leaf"><a href="/development/node/add/client-watch" title="">Quick Add Bill for all Client Watch</a></li>
		//bill table html
		$billhtml = '<div id="cw-all-bills" class="view-id-client_watch_reporting"><h3>Client Watch Bills for ' . $client . '</h3><table id="cw-bill-table"><thead><tr><th>Show on Report</th><th>Importance</th><th>Bill</th><th> Description</th><th>Summary</th><th>Sponsor</th><th>Committees</th><th>Status</th><th>Analysis</th><th>Edit</th><th>Delete</th></tr></thead><tbody>';
		/*$billhtml = '<div id="cw-all-bills" class="view-id-client_watch_reporting"><h3>Client Watch Bills for ' . $client . '</h3><table id="cw-bill-table"><thead><tr><th>Show on Report</th><th>/*<a href="/development/cw-clients/' . $client . '">/*Importance*//*</a>*</th><th>/*<a href="/development/cw-clients/' . $client . '/bill-sort">*Bill/*</a>/*</th><th> Description</th><th>Summary</th><th>Sponsor</th><th>Committees</th><th>Status</th><th>Analysis</th><th>Edit</th><th>Delete</th></tr></thead><tbody>';*/
		
		$formtophtml = $menuhtml . $billhtml;
		
		$form['top_menu'] = array(
  			'#markup' => $formtophtml,
		);
		
		//let's load user's client watch bills that contain the client/issue selected
		$query = new EntityFieldQuery();
		if ($diff == "importance") {
			$entities = $query->entityCondition('entity_type', 'node')
					->propertyCondition('type', 'client_watch')
					->propertyCondition('uid', $userid)
					->fieldCondition('field_clients', 'tid', $cl_tid, '=') 
					->fieldOrderBy('field_importance', 'value', 'ASC')
					->execute();
		}
		if ($diff == "bill") {
			$entities = $query->entityCondition('entity_type', 'node')
					->propertyCondition('type', 'client_watch')
					->propertyCondition('uid', $userid)
					->fieldCondition('field_clients', 'tid', $cl_tid, '=') 
					->propertyOrderBy('title', 'ASC')
					->execute();
		}
		if (!empty($entities['node'])) {
  			$cwNodes = array_keys($entities['node']);
			$cwBills = entity_load('node', $cwNodes);
			foreach ($cwBills as $cw) {
				//get and assign all fields to a variable
				$title = $cw->title;
				$passthrunodes[] = $cw->nid;
				preg_match('/(\d+)/', $title, $billNum3);
                $billtype3 = substr($title, 0, 2);
    			$billnumber3 = $billNum3[0];
				$baseurl3 = 'http://www.legis.ga.gov/legislation/en-US/Display/20172018/';
    			$url3 = $baseurl3 . $billtype3 . '/' . $billnumber3;
				$importance = $cw->field_importance[$cw->language][0]['value'];
				$descrip = $cw->field_billdescrip[$cw->language][0]['safe_value'];
				//need to clean non-standard character from short bill description
				$cleanedbill = substr($descrip, 3, 2);
				$cleaneddescrip = substr($cw->field_billdescrip[$cw->language][0]['safe_value'], 5);
				$descrip = $cleanedbill . $cleaneddescrip;
				$summary = $cw->field_descrip[$cw->language][0]['value'];
				$sponsor = $cw->field_sponsor[$cw->language][0]['value'];
				$committee = $cw->field_committee[$cw->language][0]['safe_value'];
				$status = $cw->field_status[$cw->language][0]['value'];
				$analysis = $cw->body[$cw->language][0]['safe_value'];
				
				//build bill HTML lines
					$form['pdf_exp_' . $n] = array(
						'#prefix' => '<tr><td>',
	 					'#type' => 'checkbox',
  						'#options' => $form['type_options']['#value'],
						'#attributes' => array($cw->nid),
  						'#required' => FALSE, 
						'#default_value' => TRUE,
						//'#value' => TRUE,
						'#checked' => TRUE,
						'#suffix' => '</td><td class="views-field-field-importance">' . $importance . '</td><td><a href="' . $url3 . '">' . $cw->title . '</a></td><td>' . $descrip . '</td><td class="views-field-field-descrip">' . $summary . '</td><td>' . $sponsor . '</td><td>' . strip_tags($committee) . '</td><td id ="status">' . strip_tags($status) . '</td><td>' . $analysis . '</td><td><a href="/development/node/' . $cw->nid . '/edit">Edit</a></td><td><a href="/development/node/' . $cw->nid . '/delete">Delete</a></td></tr>',
					);
					$forpdf .= '</td><td class="views-field-field-importance">' . $importance . '</td><td><a href="' . $url3 . '">' . $cw->title . '</a></td><td>' . $descrip . '</td><td class="views-field-field-descrip">' . $summary . '</td><td>' . $sponsor . '</td><td>' . $committee . '</td><td>' . strip_tags($status) . '</td><td>' . $analysis . '</td></tr>';
				
				$form['pass_thru_nids'][$n] = array(
					'#type' => 'text',
					'#default_value' => $cw->nid,
				);
				//increment to count rows results
				$n++;
			
			}
			$form['count'] = array(
				'#type' => 'text',
				'#default_value' => $n,
			);
		}
		
		//concat html into singular html item to return.
		$html = $menuhtml . $termslistinghtml . '</ul></div>' . $billhtml . '</tbody></table></div>';
		$billhtmlforpdf .=  '</ul></div>' . $forpdf . '</tbody></table></div>';
		
		$form['htmlforpdf'] = array(
			'#type' => 'text',
			'#default_value' => $billhtmlforpdf,
		);
	}
	else {
		//no permissions message
		$html = 'You are not subscribed to Client Watch services.  Please contact Georgia Lobby if you feel this is an error or to upgrade your contract to include this valuable service!';
		
		return $html;
	}
	
	$form['post_table'] = array(
  		'#markup' => '</tbody></table></div>',
	);
	
	$form['export_type'] = array(
  		'#type' => 'radios',
		'#prefix' => 'Select the type of report you would like to generate:',
		'#options' => array(
			0 => t('Export to PDF'), 1 => t('Export to Excel'), 2 => t('Email Link to PDF Report'), 3 => t('Print Ready PDF')
			),
		'#default_value' => 0,
	);
	
	$form['export_button'] = array(
   		'#type' => 'submit',
   		'#value' => t('Export report'),
  	);
	return $form;	
}

function galobby_cw_submit_multi($form, &$form_state) {
	//export to all options based on submit used

	$count = $form_state['complete form']['count']['#default_value'];
	//pdf creation and pdf ready print
	if ($form_state['values']['export_type'] == 0 || $form_state['values']['export_type'] == 3) {
		$redirect = 'http://new.galobby.com/development/sites/default/files/pdf-reports/' . $form_state['values']['form_build_id'] . '.pdf';
		galobby_cw_create_pdf($form, $form_state, $redirect);
	}
	//csv creation
	elseif ($form_state['values']['export_type'] == 1){
		// output headers so that the file is downloaded rather than displayed
			header('Content-Type: text/csv; charset=utf-8');
		if (is_writable('/home/galobby/public_html/development/sites/default/files/pdf-reports/')) {
			$out = fopen('/home/galobby/public_html/development/sites/default/files/pdf-reports/' . $form_state['values']['form_build_id'] . '.csv', 'a+');
			$data = array('Importance', 'Bill', 'Description', 'Summary', 'Sponsor', 'Committees', 'Status', 'Analysis');
			fputcsv($out, $data);
			$a = 0;
			$i = 0;
			//load nodes and put the data into the CSV
			while ($count > $a) {
				if ($form_state['complete form']['pdf_exp_' . $a]['#value'] == '1') {
					$nodeid = $form['pdf_exp_' . $a]['#attributes'][0];
					$cwb = node_load($nodeid);
					//clean non-standard character in short bill descrip
					$n = strlen($cwb->field_billdescrip['und'][0]['value']) - 3;
					$sub1 = substr($cwb->field_billdescrip['und'][0]['value'], 0, 2);
					$sub1 .= substr($cwb->field_billdescrip['und'][0]['value'], 3, $n);
					//dpm($sub1);
					fputcsv($out, array($cwb->field_importance['und'][0]['value'], $cwb->title, $sub1, strip_tags($cwb->field_descrip['und'][0]['value']), strip_tags($cwb->field_sponsor['und'][0]['value']), strip_tags($cwb->field_committee['und'][0]['value']), strip_tags($cwb->field_status['und'][0]['value']), strip_tags($cwb->body['und'][0]['value'])));
				}	
				$a++;
			}
			//close CSV for more data and then set the headers for automatic download
			fclose($out);
			header('Content-Disposition: attachment; filename="' . $form_state['values']['form_build_id'] . "'.csv'");
			$msg = 'Excel report <a href="http://new.galobby.com/development/sites/default/files/pdf-reports/' . $form_state['values']['form_build_id'] . '.csv" /> ' . $form_state['values']['form_build_id'] . '</a> created. Click link to download the report or share it by copying and pasting the link.';
			drupal_set_message($msg);
		}
	}
	//email the link to the CSV report
	else {
		$redirect = 'cw-send-email/' . $form_state['values']['form_build_id'];
		galobby_cw_create_pdf($form, $form_state, $redirect);
	}
}

function galobby_cw_create_pdf($form, &$form_state, $redirect) {
	//export to all options based on submit used

	$count = $form_state['complete form']['count']['#default_value'];
	//pdf creation and pdf ready print
		//let's load the user so we can brand the PDF if needed
		global $user;
		$usobj = user_load($user->uid);
		//set up html for pdf export
		$forpdf = '<head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><style>th, td{border-bottom: 1px solid black; margin: 0px; padding: 0px;} td{valign: middle;}</style></head><body><div id="branding">';
		if ($usobj->field_image['und'][0] != NULL) {
			$img = $usobj->field_image['und'][0]['filename'];
			
			$url = 'http://new.galobby.com/development/sites/default/files/';
			$forpdf .= '<img src="' . $url . $img . '" />'; 
		}
		else {
			$forpdf .= '<img src="http://new.galobby.com/development/sites/all/themes/freedom/logo.png" />';
		}
		$forpdf .= '</div><h3>Client Watch Report for ' . $form_state['build_info']['args'][0] . '</h3><table id="cw-bill-table" class="tablesorter"><thead><tr><th></th><th>Importance</th><th>Bill</th><th> Description</th><th>Summary</th><th>Sponsor</th><th>Committees</th><th>Status</th><th>Analysis</th></tr></thead><tbody>';
		$i = 0;
		//create the PDF object
		$dompdf = new DOMPDF();
		
		//put nids for report based on "show on report" true/false and put them in html for pdf
		while ($count > $i) {
			if ($form_state['complete form']['pdf_exp_' . $i]['#value'] == '1') {
				$sub = substr($form_state['complete form']['pdf_exp_' . $i]['#suffix'], 0, -121);
				$forpdf .= '<tr><td>' . $sub . '</td></tr>';
			}
			$i++;
		}
		
		$pdfhtml .= $forpdf . '</tbody></table></body>';
		//dpm($pdfhtml);
		$dompdf->set_paper('A4', 'landscape');
		
		//load html into PDF object
		$dompdf->load_html($pdfhtml);
		$dompdf->render();
		
		//save the PDF to the FTP folder
		$output = $dompdf->output();
		file_put_contents("sites/default/files/pdf-reports/" . $form_state['values']['form_build_id'] . ".pdf", $output);
		
		//redirect to the new PDF or the email form depending on the redirect link and which report selected
		$form_state['redirect'] = $redirect;
		//when user comes back to a Drupal page, let's give them the link
		$message = 'PDF export complete. Copy and paste the following link to share: <a href="http://new.galobby.com/development/sites/default/files/pdf-reports/' . $form_state['values']['form_build_id'] . '.pdf" />http://new.galobby.com/development/sites/default/files/pdf-reports/' . $form_state['values']['form_build_id'] . '.pdf</a>';
		drupal_set_message($message);
	}

/**
 * Implements hook_form_alter() to redirect users to cw-landing after deleting bills from the table.
 */
function galobby_cw_form_alter(&$form, &$form_state, $form_id){
  //dpm($form_id);
  //dpm($form);
	switch ($form_id) {
    case 'node_delete_confirm':
      // replace "article" in next line with your node type machine name
     if($form['#node']->type == 'client_watch') {
        $form['actions']['submit']['#submit'][] = 'node_delete_confirm_submit';
        $form['actions']['submit']['#submit'][] = 'galobby_cw_redirect';
      }
	case 'client_watch_node_form':
	if($form['#node']->type == 'client_watch') {
		//$form['actions']['submit']['#submit'][] = 'node_form_submit';
		$form['actions']['submit']['#submit'][] = 'galobby_cw_redirect';
	}
    break;
  }
}

function galobby_cw_redirect($form, &$form_state){
  // replace "node/123" in next line with node you'ld like to redirect to
  $form_state['redirect'] = 'cw-landing';
}